{"version":3,"sources":["components/years-selection/years-selection.module.sass","services/data.service.context.ts","services/date-time.utils.ts","components/chart/chart.module.sass","components/chart/label-formatter.ts","components/chart/chart.component.tsx","components/chart/chart.container.tsx","components/years-selection/years-selection.component.tsx","App.tsx","serviceWorker.ts","index.tsx","services/index.ts","services/hgraph.data.service.ts","App.module.sass"],"names":["module","exports","hgraphDataService","HgraphDataService","DataServiceContext","React","createContext","getDefaultYear","today","DateTime","local","month","minus","years","year","labelCache","Map","labelFormatter","v","res","get","split","map","Number","dd","mm","Date","toLocaleString","day","e","set","colors","getYearColor","ChartComponent","props","data","width","height","ticks","Array","fill","_","idx","undefined","minimumIntegerDigits","LineChart","className","styles","lineChart","CartesianGrid","strokeDasharray","XAxis","dataKey","YAxis","domain","tickCount","Tooltip","Legend","Line","key","type","dot","isAnimationActive","stroke","Chart","state","levels","service","context","this","getLevels","then","setState","chartData","reduce","level","dateStr","date","toFormat","yearStr","levelsByDate","find","byDate","push","String","Component","contextType","YearsSelection","selectedYears","getYears","defaultYear","handleChange","select","multiple","value","size","length","onChange","evt","target","options","filter","option","selected","App","useState","setYears","app","h1","Provider","interface","style","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","onUpdate","onSuccess","catch","error","ReactDOM","render","StrictMode","document","getElementById","URL","process","href","origin","addEventListener","fetch","headers","response","contentType","status","indexOf","ready","unregister","reload","checkValidServiceWorker","Memoize","getLiveData","liveData","getCachedData","concat","yearsMap","cur","keys","until2020","cachedDataToSortedLevels","archive","in2020","archive2020","json","rawDataToSortedLevels","typedData","startYear","endYear","rybinskData","item","ryb","items","from","entries","fromFormat","isValid","sort","o1","o2","diff","toObject","milliseconds","Object"],"mappings":"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","file":"static/js/main.4a340bea.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"select\":\"years-selection_select__3i5ft\",\"option\":\"years-selection_option__3G7I1\"};","import React from 'react';\r\nimport { HgraphDataService } from './hgraph.data.service';\r\n\r\nimport { Level } from './levels.model';\r\n\r\nexport interface DataService {\r\n\tgetLevels(): Promise<Level[]>;\r\n\tgetYears(): Promise<number[]>;\r\n}\r\n\r\nexport const hgraphDataService = new HgraphDataService();\r\nexport const DataServiceContext = React.createContext<DataService>(hgraphDataService);\r\n","import {DateTime} from 'luxon';\r\n\r\nexport const getDefaultYear = () => {\r\n    const today = DateTime.local();\r\n    if (today.month <= 3) {\r\n        return today.minus({years: 1}).year;\r\n    }\r\n    return today.year;\r\n};\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"lineChart\":\"chart_lineChart__31CP1\"};","const labelCache: Map<any, string> = new Map();\r\n\r\nexport const labelFormatter = (v: any) => {\r\n    let res = labelCache.get(v);\r\n    if (!res) {\r\n        try {\r\n            const [dd, mm] = v.split('.').map(Number);\r\n            const date = new Date(2020, mm - 1, dd);\r\n            res = date.toLocaleString('ru-RU', {month: 'long', day: 'numeric'});\r\n        } catch (e) {\r\n            res = '';\r\n        }\r\n        labelCache.set(v, res);\r\n    }\r\n    return res;\r\n};\r\n","import React from 'react';\r\nimport {CartesianGrid, Legend, Line, LineChart, Tooltip, XAxis, YAxis} from 'recharts';\r\nimport {Level} from '../../services/levels.model';\r\n\r\nimport styles from './chart.module.sass';\r\nimport {labelFormatter} from './label-formatter';\r\n\r\nexport type LevelsByYearMap = Map<number, Level[]>;\r\nexport type LevelsByDate = { date: string, [year: string]: any }\r\ntype ChartComponentProps = { data: LevelsByDate[], years: string[], width: number, height: number };\r\n\r\nconst colors: { [index: string]: string } = {\r\n    '2014': '#9BC53D',\r\n    '2015': '#C3423F',\r\n    '2016': '#404E4D',\r\n    '2017': '#9BC53D',\r\n    '2018': '#19535F',\r\n    '2019': '#0B7A75',\r\n    '2020': '#7B2D26',\r\n    '2021': '#F1D302',\r\n    '2022': '#9BC53D',\r\n    '2023': '#9BC53D',\r\n    '2024': '#9BC53D',\r\n};\r\n\r\nconst getYearColor = (year: string) => colors[year] || '#000000';\r\n\r\nexport const ChartComponent = (props: ChartComponentProps) => {\r\n    const {data, years, width, height} = props;\r\n    const ticks = Array(12).fill(1).map((_, idx) => '01.' + Number(idx + 1).toLocaleString(undefined, {minimumIntegerDigits: 2}));\r\n    return (\r\n        <LineChart\r\n            className={styles.lineChart}\r\n            width={width}\r\n            height={height}\r\n            data={data}\r\n        >\r\n            <CartesianGrid strokeDasharray=\"1 1\"/>\r\n            <XAxis dataKey=\"date\"\r\n                   ticks={ticks}/>\r\n            {/*<YAxis domain={[(min: number) => Math.round(min * 10 - 2) / 10, (max: number) => Math.round(max * 10 + 2) / 10]} />*/}\r\n            <YAxis domain={[98, 102]} tickCount={11}/>\r\n            <Tooltip labelFormatter={labelFormatter}/>\r\n            <Legend/>\r\n            {years.map((year) => (\r\n                <Line key={year}\r\n                      type=\"monotone\"\r\n                      dataKey={year}\r\n                      dot={false}\r\n                      isAnimationActive={false}\r\n                      stroke={(getYearColor(year)) as string}/>\r\n            ))\r\n            }\r\n        </LineChart>\r\n    );\r\n};\r\n","import React from 'react';\r\nimport AutoSizer from 'react-virtualized-auto-sizer';\r\nimport {DataService, DataServiceContext, Level} from '../../services';\r\nimport {ChartComponent, LevelsByDate} from './chart.component';\r\n\r\ntype ChartProps = { years: string[] };\r\ntype ChartState = { levels: Level[] };\r\n\r\n\r\nexport class Chart extends React.Component<ChartProps, ChartState> {\r\n\tstatic contextType = DataServiceContext;\r\n\r\n\tstate: ChartState = { levels: [] };\r\n\r\n\tprivate service: DataService;\r\n\r\n\tconstructor(props: ChartProps) {\r\n\t\tsuper(props);\r\n\t\tthis.service = this.context;\r\n\t}\r\n\r\n\tcomponentDidMount() {\r\n\t\tlet service: DataService = this.context;\r\n\t\tservice.getLevels().then(levels => this.setState({ levels }));\r\n\t}\r\n\r\n\trender() {\r\n\t\tconst { levels } = this.state;\r\n\t\tconst { years } = this.props;\r\n\r\n\t\tconst chartData = levels.reduce<LevelsByDate[]>((res, level) => {\r\n\t\t\tconst dateStr = level.date.toFormat('dd.MM');\r\n\t\t\tconst yearStr = level.date.toFormat('yyyy');\r\n\t\t\tlet levelsByDate = res.find(byDate => byDate.date === dateStr);\r\n\t\t\tif (!levelsByDate) {\r\n\t\t\t\tlevelsByDate = { date: dateStr };\r\n\t\t\t\tres.push(levelsByDate);\r\n\t\t\t}\r\n\t\t\tlevelsByDate[yearStr] = level.level;\r\n\t\t\treturn res;\r\n\t\t}, []);\r\n\r\n\t\treturn (\r\n\t\t\t<AutoSizer>\r\n\t\t\t\t{({ width, height }) => <ChartComponent data={chartData}\r\n\t\t\t\t                                        years={years.map(String)}\r\n\t\t\t\t                                        height={height}\r\n\t\t\t\t                                        width={width} />}\r\n\t\t\t</AutoSizer>\r\n\t\t);\r\n\t}\r\n}\r\n","import React from 'react';\r\nimport {DataService, DataServiceContext} from '../../services';\r\nimport {ChangeHandler} from '../change-handler';\r\n\r\nimport styles from './years-selection.module.sass';\r\n\r\ntype YearsSelectionProps = ChangeHandler<string[]> & { defaultYear: string };\r\ntype YearsSelectionState = { years: string[], selectedYears: string[] };\r\n\r\nexport class YearsSelection extends React.Component<YearsSelectionProps, YearsSelectionState> {\r\n    static contextType = DataServiceContext;\r\n\r\n    state = {\r\n        years: [],\r\n        selectedYears: [],\r\n    };\r\n\r\n    componentDidMount() {\r\n        const service: DataService = this.context;\r\n        service.getYears().then(years => this.setState({years: years.map(String)}));\r\n        // todo remove 2019\r\n        let selectedYears = ['2019', this.props.defaultYear];\r\n        this.setState({selectedYears});\r\n        this.props.handleChange(selectedYears);\r\n    }\r\n\r\n    render() {\r\n        const {handleChange} = this.props;\r\n        const {selectedYears, years} = this.state;\r\n\r\n        const onChange = (evt: React.ChangeEvent<HTMLSelectElement>) => {\r\n            const selectedYears = [...evt.target.options].filter(option => option.selected).map(option => option.value);\r\n            this.setState({selectedYears});\r\n            handleChange(selectedYears);\r\n        };\r\n\r\n        return (\r\n            <div>\r\n                <select className={styles.select}\r\n                        multiple={true}\r\n                        value={selectedYears}\r\n                        size={years.length}\r\n                        onChange={onChange}>\r\n                    {years.map(year => <option className={styles.option} key={year} value={year}>{year}</option>)}\r\n                </select>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\n\r\n","import React, {useState} from 'react';\r\n\r\nimport styles from './App.module.sass';\r\nimport {Chart, YearsSelection} from './components';\r\nimport {DataServiceContext, getDefaultYear, hgraphDataService} from './services';\r\n\r\nfunction App() {\r\n    const [years, setYears] = useState<string[]>([]);\r\n    const defaultYear = String(getDefaultYear());\r\n\r\n    return (\r\n        <div className={styles.app}>\r\n            <h1 className={styles.h1}>Уровень воды в Рыбинском вдхр.</h1>\r\n            <DataServiceContext.Provider value={hgraphDataService}>\r\n                <div className={styles.interface}>\r\n                    <div style={{width: '100%'}}>\r\n                        <Chart years={years}/>\r\n                    </div>\r\n                    <div>\r\n                        <YearsSelection handleChange={setYears} defaultYear={defaultYear}/>\r\n                    </div>\r\n                </div>\r\n            </DataServiceContext.Provider>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\ntype Config = {\r\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\r\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\r\n};\r\n\r\nexport function register(config?: Config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(\r\n      process.env.PUBLIC_URL,\r\n      window.location.href\r\n    );\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl: string, config?: Config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.sass';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\nserviceWorker.register();\r\n","export * from './data.service.context';\r\nexport * from './date-time.utils';\r\nexport * from './hgraph.data.service';\r\nexport * from './levels.model';\r\n","import { DateTime } from 'luxon';\r\nimport { Memoize } from 'typescript-memoize';\r\nimport { LevelsByYearMap } from '../components/chart/chart.component';\r\nimport archive from '../data/ryb2019.json';\r\nimport archive2020 from '../data/ryb2020.json';\r\nimport { DataService } from './data.service.context';\r\nimport { Level } from './levels.model';\r\n\r\ntype HgraphDataItem = {\r\n    date: string;\r\n    items: { [key: string]: number[] };\r\n}\r\n\r\ntype Archive = { [key: string]: number }\r\n\r\nexport class HgraphDataService implements DataService {\r\n    private static getCachedData(): Level[] {\r\n        const until2020 = cachedDataToSortedLevels(archive, 2014, 2019);\r\n        const in2020 = cachedDataToSortedLevels(archive2020, 2020, 2020);\r\n        return [...until2020, ...in2020];\r\n    };\r\n\r\n    private static async getLiveData(): Promise<Level[]> {\r\n        const response = await fetch('http://hgraph.ru/api/year/2021');\r\n        const data = await response.json();\r\n        return rawDataToSortedLevels(data, 2021, 2021);\r\n    }\r\n\r\n    @Memoize()\r\n    getLevels(): Promise<Level[]> {\r\n        return HgraphDataService.getLiveData().then(liveData => HgraphDataService.getCachedData().concat(liveData));\r\n    }\r\n\r\n    @Memoize()\r\n    async getYears(): Promise<number[]> {\r\n        const levels = await this.getLevels();\r\n        const yearsMap = levels.reduce<LevelsByYearMap>((map: LevelsByYearMap, cur: Level) => {\r\n            const year = cur.date.year;\r\n            const levels = map.get(year) || map.set(year, []).get(year);\r\n            levels!.push(cur);\r\n            return map;\r\n        }, new Map());\r\n\r\n        return [...yearsMap.keys()];\r\n    }\r\n}\r\n\r\nfunction rawDataToSortedLevels(typedData: HgraphDataItem[], startYear: number, endYear: number) {\r\n    const rybinskData = typedData.reduce((map, item) => {\r\n        const ryb = item.items['Рыбинское'];\r\n        if (ryb) {\r\n            map.set(item.date, ryb[0]);\r\n        }\r\n        return map;\r\n    }, new Map<string, number>());\r\n    const dataArray = Array.from(rybinskData.entries());\r\n\r\n    const convertedArray = dataArray.map(([date, level]) => ({\r\n        date: DateTime.fromFormat(date, 'dd.MM.yyyy'),\r\n        level,\r\n    })).filter(item => item.date.isValid).filter(item => item.date.year >= startYear && item.date.year <= endYear);\r\n\r\n    return convertedArray.sort((o1, o2) => {\r\n        return o1.date.diff(o2.date).toObject().milliseconds || 0;\r\n    });\r\n}\r\n\r\nfunction cachedDataToSortedLevels(archive: Archive, startYear: number, endYear: number) {\r\n    const dataArray = Array.from(Object.entries(archive));\r\n\r\n    const convertedArray = dataArray.map(([date, level]) => ({\r\n        date: DateTime.fromFormat(date, 'yyyy-MM-dd'),\r\n        level,\r\n    })).filter(item => item.date.isValid).filter(item => item.date.year >= startYear && item.date.year <= endYear);\r\n\r\n    return convertedArray.sort((o1, o2) => {\r\n        return o1.date.diff(o2.date).toObject().milliseconds || 0;\r\n    });\r\n\r\n}\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"app\":\"App_app__4HWOX\",\"interface\":\"App_interface__2-f8B\",\"h1\":\"App_h1__2o6DZ\"};"],"sourceRoot":""}