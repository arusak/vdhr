{"version":3,"sources":["components/chart/chart.module.sass","services/index.ts","components/chart/chart.utils.ts","utils/color.utils.ts","components/chart/chart.component.tsx","components/chart/chart.container.tsx","components/years-selector/years-selector.component.tsx","components/years-selector/years-selector.container.ts","App.tsx","serviceWorker.ts","index.tsx","components/years-selector/years-selector.module.sass","services/statistic.service.ts","services/hgraph.data.service.ts","App.module.sass","services/data.service.context.ts","services/date-time.utils.ts"],"names":["module","exports","labelCache","Map","labelFormatter","v","res","get","split","map","Number","dd","mm","Date","toLocaleString","month","day","e","set","colors","getYearColor","year","ChartComponent","props","data","years","width","height","ticks","Array","fill","_","idx","undefined","minimumIntegerDigits","className","styles","lineChart","strokeDasharray","dataKey","axisLine","domain","tickCount","key","type","dot","isAnimationActive","connectNulls","stroke","strokeWidth","Chart","service","useContext","DataServiceContext","useState","levels","setLevels","isLoading","setLoading","useEffect","getLevels","then","finally","chartData","reduce","observation","dateStr","date","toFormat","yearStr","levelsByDate","find","byDate","push","level","YearsSelectorComponent","onChange","yearsList","selectedYears","handleChange","evt","target","checked","value","updatedYears","filter","y","container","includes","labelProps","label","style","background","checkboxProps","input","YearsSelector","setYearsList","getYears","String","React","createElement","App","getDefaultYear","setSelectedYears","app","h1","Provider","hgraphDataService","interface","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","console","log","onUpdate","onSuccess","catch","error","ReactDOM","render","StrictMode","document","getElementById","URL","process","href","origin","addEventListener","fetch","headers","response","contentType","status","indexOf","ready","unregister","reload","checkValidServiceWorker","statisticService","smoothenLevels","val","isLast","length","prev","next","diffFromPrev","diffFromNext","isSameSignDiff","correctedLevel","Math","abs","HgraphDataService","Memoize","cachedDataToSortedLevels","archive","archive2020","json","rawDataToSortedLevels","warn","Promise","resolve","getLiveData","liveData","getCachedData","concat","yearsMap","cur","keys","typedData","startYear","endYear","rybinskData","item","ryb","items","from","entries","DateTime","fromFormat","isValid","sort","o1","o2","diff","toObject","milliseconds","Object","createContext","today","local","minus","toString"],"mappings":"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","file":"static/js/main.89141a9d.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"lineChart\":\"chart_lineChart__31CP1\"};","export * from './data.service.context';\r\nexport * from './date-time.utils';\r\nexport * from './hgraph.data.service';\r\nexport * from './levels.model';\r\n","const labelCache: Map<any, string> = new Map();\r\n\r\nexport const labelFormatter = (v: any) => {\r\n    let res = labelCache.get(v);\r\n    if (!res) {\r\n        try {\r\n            const [dd, mm] = v.split('.').map(Number);\r\n            const date = new Date(2020, mm - 1, dd);\r\n            res = date.toLocaleString('ru-RU', { month: 'long', day: 'numeric' });\r\n        } catch (e) {\r\n            res = '';\r\n        }\r\n        labelCache.set(v, res);\r\n    }\r\n    return res;\r\n};\r\n\r\nexport const getTimelineTicks =\r\n    () => Array(12).fill(1).map((_, idx) => '01.' + Number(idx + 1).toLocaleString(undefined, { minimumIntegerDigits: 2 }));\r\n","const colors: { [index: string]: string } = {\r\n    '2014': '#9BC53D',\r\n    '2015': '#C3423F',\r\n    '2016': '#0D2866',\r\n    '2017': '#8A2691',\r\n    '2018': '#19535F',\r\n    '2019': '#7B2D26',\r\n    '2020': '#3B7A0B',\r\n    '2021': '#F1D302',\r\n    '2022': '#9BC53D',\r\n    '2023': '#9BC53D',\r\n    '2024': '#9BC53D',\r\n};\r\nexport const getYearColor = (year: string) => colors[year] || '#000000';\r\n","import React from 'react';\r\nimport { CartesianGrid, Legend, Line, LineChart, Tooltip, XAxis, YAxis } from 'recharts';\r\nimport { Level } from 'services/levels.model';\r\nimport { labelFormatter, getTimelineTicks } from './chart.utils';\r\nimport styles from './chart.module.sass';\r\nimport { getYearColor } from '../../utils/color.utils';\r\n\r\nexport type LevelsByYearMap = Map<number, Level[]>;\r\nexport type LevelsByDate = { date: string, [year: string]: any }\r\nexport type ChartComponentProps = { data: LevelsByDate[], years: string[], width: number, height: number };\r\n\r\nexport const ChartComponent = (props: ChartComponentProps) => {\r\n    const { data, years, width, height } = props;\r\n    const ticks = getTimelineTicks();\r\n    return (\r\n        <LineChart\r\n            className={styles.lineChart}\r\n            width={width}\r\n            height={height}\r\n            data={data}\r\n        >\r\n            <CartesianGrid strokeDasharray=\"1 1\"/>\r\n            <XAxis dataKey=\"date\"\r\n                   axisLine={false}\r\n                   ticks={ticks}/>\r\n            <YAxis domain={[98, 102]} tickCount={21} axisLine={false}/>\r\n            <Tooltip labelFormatter={labelFormatter}/>\r\n            <Legend/>\r\n            {years.map((year) => (\r\n                <Line key={year}\r\n                      type=\"monotone\"\r\n                      dataKey={year}\r\n                      dot={false}\r\n                      isAnimationActive={false}\r\n                      connectNulls={true}\r\n                      stroke={getYearColor(year)}\r\n                      strokeWidth={1.5}\r\n                />\r\n            ))}\r\n        </LineChart>\r\n    );\r\n};\r\n","import React, { useContext, useState, useEffect } from 'react';\r\nimport AutoSizer from 'react-virtualized-auto-sizer';\r\nimport { DataServiceContext, Level } from '../../services';\r\nimport { ChartComponent, LevelsByDate } from './chart.component';\r\n\r\ntype ChartProps = { years: string[] };\r\n\r\nexport const Chart = ({ years }: ChartProps) => {\r\n    const service = useContext(DataServiceContext);\r\n    const [levels, setLevels] = useState<Level[]>([]);\r\n    const [isLoading, setLoading] = useState(true);\r\n\r\n    useEffect(() => {\r\n        service.getLevels()\r\n            .then(setLevels)\r\n            .finally(() => setLoading(false));\r\n    }, [service]);\r\n\r\n    const chartData = levels.reduce<LevelsByDate[]>((res, observation) => {\r\n        const dateStr = observation.date.toFormat('dd.MM');\r\n        const yearStr = observation.date.toFormat('yyyy');\r\n        let levelsByDate = res.find(byDate => byDate.date === dateStr);\r\n        if (!levelsByDate) {\r\n            levelsByDate = { date: dateStr };\r\n            res.push(levelsByDate);\r\n        }\r\n        levelsByDate[yearStr] = observation.level;\r\n        return res;\r\n    }, []);\r\n\r\n    return (\r\n        isLoading\r\n            ?\r\n            <div>Loading...</div>\r\n            :\r\n            <AutoSizer>\r\n                {({ width, height }) =>\r\n                    <ChartComponent data={chartData}\r\n                                    years={years}\r\n                                    height={height}\r\n                                    width={width}/>}\r\n            </AutoSizer>\r\n    );\r\n};\r\n","import React from 'react';\r\n\r\nimport styles from './years-selector.module.sass';\r\nimport { getYearColor } from '../../utils/color.utils';\r\nimport { YearsSelectorProps } from './years-selector.container';\r\n\r\ntype Props = YearsSelectorProps & {\r\n    yearsList: string[];\r\n    selectedYears: string[];\r\n}\r\n\r\nexport const YearsSelectorComponent = ({onChange,yearsList,selectedYears}:Props)=>{\r\n    const handleChange = (evt: React.ChangeEvent<HTMLInputElement>) => {\r\n        const { checked, value } = evt.target;\r\n        const updatedYears = checked ? [...selectedYears, value] : selectedYears.filter(y => y !== value);\r\n        onChange(updatedYears);\r\n    };\r\n\r\n    return (\r\n        <div className={styles.container}>\r\n            {yearsList.map(y => {\r\n                const checked = selectedYears.includes(y);\r\n                const labelProps = {\r\n                    className: `${styles.label} ${checked && styles.checked}`,\r\n                    style: { background: `${checked ? getYearColor(y) : 'none'}` },\r\n                    key: y,\r\n                };\r\n                const checkboxProps = {\r\n                    type: 'checkbox',\r\n                    className: styles.input,\r\n                    value: y,\r\n                    checked,\r\n                    onChange: handleChange,\r\n                };\r\n                return <label {...labelProps}>\r\n                    <input {...checkboxProps}/>{' '}{y}\r\n                </label>;\r\n            })}\r\n        </div>\r\n    );\r\n}\r\n\r\n\r\n","import React, { useContext, useEffect, useState } from 'react';\r\nimport { DataServiceContext } from '../../services';\r\nimport { YearsSelectorComponent } from './years-selector.component';\r\n\r\nexport type YearsSelectorProps = {\r\n    onChange: (selectedYears: string[]) => void;\r\n    selectedYears: string[];\r\n}\r\n\r\nexport const YearsSelector = ({ onChange, selectedYears }: YearsSelectorProps) => {\r\n    const service = useContext(DataServiceContext);\r\n    const [yearsList, setYearsList] = useState<string[]>([]);\r\n    useEffect(() => {\r\n        service.getYears().then(years => setYearsList(years.map(String)));\r\n    }, []);\r\n\r\n    return React.createElement(YearsSelectorComponent, { onChange, yearsList, selectedYears });\r\n};\r\n","import React, { useState } from 'react';\r\n\r\nimport styles from './App.module.sass';\r\nimport { Chart, YearsSelector } from './components';\r\nimport { DataServiceContext, getDefaultYear, hgraphDataService } from './services';\r\n\r\nfunction App() {\r\n    const [selectedYears, setSelectedYears] = useState([getDefaultYear()]);\r\n\r\n    return (\r\n        <div className={styles.app}>\r\n            <h1 className={styles.h1}>Уровень воды в Рыбинском вдхр.</h1>\r\n            <DataServiceContext.Provider value={hgraphDataService}>\r\n                <div className={styles.interface}>\r\n                    <div style={{ width: '100%' }}>\r\n                        <Chart years={selectedYears}/>\r\n                    </div>\r\n                    <div>\r\n                        <YearsSelector\r\n                            onChange={setSelectedYears}\r\n                            selectedYears={selectedYears}/>\r\n                    </div>\r\n                </div>\r\n            </DataServiceContext.Provider>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n    window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n        /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/,\r\n    ),\r\n);\r\n\r\ntype Config = {\r\n    onSuccess?: (registration: ServiceWorkerRegistration) => void;\r\n    onUpdate?: (registration: ServiceWorkerRegistration) => void;\r\n};\r\n\r\nexport function register(config?: Config) {\r\n    if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n        // The URL constructor is available in all browsers that support SW.\r\n        const publicUrl = new URL(\r\n            process.env.PUBLIC_URL,\r\n            window.location.href,\r\n        );\r\n        if (publicUrl.origin !== window.location.origin) {\r\n            // Our service worker won't work if PUBLIC_URL is on a different origin\r\n            // from what our page is served on. This might happen if a CDN is used to\r\n            // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n            return;\r\n        }\r\n\r\n        window.addEventListener('load', () => {\r\n            const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n            if (isLocalhost) {\r\n                // This is running on localhost. Let's check if a service worker still exists or not.\r\n                checkValidServiceWorker(swUrl, config);\r\n\r\n                // Add some additional logging to localhost, pointing developers to the\r\n                // service worker/PWA documentation.\r\n                navigator.serviceWorker.ready.then(() => {\r\n                    console.log(\r\n                        'This web app is being served cache-first by a service ' +\r\n                        'worker. To learn more, visit https://bit.ly/CRA-PWA',\r\n                    );\r\n                });\r\n            } else {\r\n                // Is not localhost. Just register service worker\r\n                registerValidSW(swUrl, config);\r\n            }\r\n        });\r\n    }\r\n}\r\n\r\nfunction registerValidSW(swUrl: string, config?: Config) {\r\n    navigator.serviceWorker\r\n        .register(swUrl)\r\n        .then(registration => {\r\n            registration.onupdatefound = () => {\r\n                const installingWorker = registration.installing;\r\n                if (installingWorker == null) {\r\n                    return;\r\n                }\r\n                installingWorker.onstatechange = () => {\r\n                    if (installingWorker.state === 'installed') {\r\n                        if (navigator.serviceWorker.controller) {\r\n                            // At this point, the updated precached content has been fetched,\r\n                            // but the previous service worker will still serve the older\r\n                            // content until all client tabs are closed.\r\n                            console.log(\r\n                                'New content is available and will be used when all ' +\r\n                                'tabs for this page are closed. See https://bit.ly/CRA-PWA.',\r\n                            );\r\n\r\n                            // Execute callback\r\n                            if (config && config.onUpdate) {\r\n                                config.onUpdate(registration);\r\n                            }\r\n                        } else {\r\n                            // At this point, everything has been precached.\r\n                            // It's the perfect time to display a\r\n                            // \"Content is cached for offline use.\" message.\r\n                            console.log('Content is cached for offline use.');\r\n\r\n                            // Execute callback\r\n                            if (config && config.onSuccess) {\r\n                                config.onSuccess(registration);\r\n                            }\r\n                        }\r\n                    }\r\n                };\r\n            };\r\n        })\r\n        .catch(error => {\r\n            console.error('Error during service worker registration:', error);\r\n        });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\r\n    // Check if the service worker can be found. If it can't reload the page.\r\n    fetch(swUrl, {\r\n        headers: { 'Service-Worker': 'script' },\r\n    })\r\n        .then(response => {\r\n            // Ensure service worker exists, and that we really are getting a JS file.\r\n            const contentType = response.headers.get('content-type');\r\n            if (\r\n                response.status === 404 ||\r\n                (contentType != null && contentType.indexOf('javascript') === -1)\r\n            ) {\r\n                // No service worker found. Probably a different app. Reload the page.\r\n                navigator.serviceWorker.ready.then(registration => {\r\n                    registration.unregister().then(() => {\r\n                        window.location.reload();\r\n                    });\r\n                });\r\n            } else {\r\n                // Service worker found. Proceed as normal.\r\n                registerValidSW(swUrl, config);\r\n            }\r\n        })\r\n        .catch(() => {\r\n            console.log(\r\n                'No internet connection found. App is running in offline mode.',\r\n            );\r\n        });\r\n}\r\n\r\nexport function unregister() {\r\n    if ('serviceWorker' in navigator) {\r\n        navigator.serviceWorker.ready\r\n            .then(registration => {\r\n                registration.unregister();\r\n            })\r\n            .catch(error => {\r\n                console.error(error.message);\r\n            });\r\n    }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.sass';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n    <React.StrictMode>\r\n        <App/>\r\n    </React.StrictMode>,\r\n    document.getElementById('root'),\r\n);\r\n\r\nserviceWorker.register();\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"years-selector_container__1GW1M\",\"label\":\"years-selector_label__3rWxP\",\"checked\":\"years-selector_checked__31KHa\",\"input\":\"years-selector_input__kwanH\"};","import { Level } from './levels.model';\r\n\r\nclass StatisticService {\r\n    /**\r\n     * Check if\r\n     */\r\n    readonly smoothenLevels = (levels: Level[]): Level[] => {\r\n        return levels.map((val, idx) => {\r\n            const isLast = idx === levels.length - 1;\r\n            const isFirst = idx === 0;\r\n            // first/last value is checked against single next/prev value (not fully accurate logic but let it be)\r\n            const prev = !isFirst ? levels[idx - 1].level : levels[idx + 1].level;\r\n            const next = !isLast ? levels[idx + 1].level : levels[idx - 1].level;\r\n            const diffFromPrev = val.level - prev;\r\n            const diffFromNext = val.level - next;\r\n            const isSameSignDiff = diffFromPrev * diffFromNext > 0;\r\n            const correctedLevel = Math.abs(diffFromPrev) > 0.05 && Math.abs(diffFromNext) > 0.05 && isSameSignDiff ? (prev + next) / 2 : val.level;\r\n            return { ...val, level: correctedLevel };\r\n        });\r\n    };\r\n}\r\n\r\nexport const statisticService = new StatisticService();\r\n","import { DateTime } from 'luxon';\r\nimport { Memoize } from 'typescript-memoize';\r\nimport { LevelsByYearMap } from '../components/chart/chart.component';\r\nimport archive from '../data/ryb2019.json';\r\nimport archive2020 from '../data/ryb2020.json';\r\nimport { DataService } from './data.service.context';\r\nimport { Level } from './levels.model';\r\nimport { statisticService } from './statistic.service';\r\n\r\ntype HgraphDataItem = {\r\n    date: string;\r\n    items: { [key: string]: number[] };\r\n}\r\n\r\ntype Archive = { [key: string]: number }\r\n\r\nexport class HgraphDataService implements DataService {\r\n    private static getCachedData(): Level[] {\r\n        const until2020 = cachedDataToSortedLevels(archive, 2014, 2019);\r\n        const in2020 = cachedDataToSortedLevels(archive2020, 2020, 2020);\r\n        return [...until2020, ...in2020];\r\n    };\r\n\r\n    private static async getLiveData(): Promise<Level[]> {\r\n        try {\r\n            const response = await fetch('http://hgraph.ru/api/year/2021');\r\n            const data = await response.json();\r\n            return rawDataToSortedLevels(data, 2021, 2021);\r\n        } catch (e) {\r\n            console.warn('Couldn\\'t get live data');\r\n            return Promise.resolve([]);\r\n        }\r\n    }\r\n\r\n    @Memoize()\r\n    getLevels(): Promise<Level[]> {\r\n        return HgraphDataService.getLiveData()\r\n            .then(liveData => HgraphDataService.getCachedData().concat(liveData))\r\n            .then(statisticService.smoothenLevels);\r\n    }\r\n\r\n    @Memoize()\r\n    async getYears(): Promise<number[]> {\r\n        const levels = await this.getLevels();\r\n        const yearsMap = levels.reduce<LevelsByYearMap>((map: LevelsByYearMap, cur: Level) => {\r\n            const year = cur.date.year;\r\n            const levels = map.get(year) || map.set(year, []).get(year);\r\n            levels!.push(cur);\r\n            return map;\r\n        }, new Map());\r\n\r\n        return [...yearsMap.keys()];\r\n    }\r\n}\r\n\r\nfunction rawDataToSortedLevels(typedData: HgraphDataItem[], startYear: number, endYear: number) {\r\n    const rybinskData = typedData.reduce((map, item) => {\r\n        const ryb = item.items['Рыбинское'];\r\n        if (ryb) {\r\n            map.set(item.date, ryb[0]);\r\n        }\r\n        return map;\r\n    }, new Map<string, number>());\r\n    const dataArray = Array.from(rybinskData.entries());\r\n\r\n    const convertedArray = dataArray.map(([date, level]) => ({\r\n        date: DateTime.fromFormat(date, 'dd.MM.yyyy'),\r\n        level,\r\n    })).filter(item => item.date.isValid).filter(item => item.date.year >= startYear && item.date.year <= endYear);\r\n\r\n    return convertedArray.sort((o1, o2) => {\r\n        return o1.date.diff(o2.date).toObject().milliseconds || 0;\r\n    });\r\n}\r\n\r\nfunction cachedDataToSortedLevels(archive: Archive, startYear: number, endYear: number) {\r\n    const dataArray = Array.from(Object.entries(archive));\r\n\r\n    const convertedArray = dataArray.map(([date, level]) => ({\r\n        date: DateTime.fromFormat(date, 'yyyy-MM-dd'),\r\n        level,\r\n    })).filter(item => item.date.isValid).filter(item => item.date.year >= startYear && item.date.year <= endYear);\r\n\r\n    return convertedArray.sort((o1, o2) => {\r\n        return o1.date.diff(o2.date).toObject().milliseconds || 0;\r\n    });\r\n\r\n}\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"app\":\"App_app__4HWOX\",\"interface\":\"App_interface__2-f8B\",\"h1\":\"App_h1__2o6DZ\"};","import React from 'react';\r\nimport { HgraphDataService } from './hgraph.data.service';\r\n\r\nimport { Level } from './levels.model';\r\n\r\nexport interface DataService {\r\n    getLevels(): Promise<Level[]>;\r\n\r\n    getYears(): Promise<number[]>;\r\n}\r\n\r\nexport const hgraphDataService = new HgraphDataService();\r\nexport const DataServiceContext = React.createContext<DataService>(hgraphDataService);\r\n","import { DateTime } from 'luxon';\r\n\r\nexport const getDefaultYear = () => {\r\n    const today = DateTime.local();\r\n    const defaultYear = today.month > 3 ? today.year : today.minus({ years: 1 }).year;\r\n    return defaultYear.toString();\r\n};\r\n"],"sourceRoot":""}