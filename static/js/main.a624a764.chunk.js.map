{"version":3,"sources":["components/chart/chart.module.sass","components/chart/chart.utils.ts","utils/color.utils.ts","utils/date.utils.ts","components/chart/chart.component.tsx","contexts/state/state.reducer.ts","contexts/state/state.context.tsx","services/statistic.service.ts","services/hgraph.data.service.ts","services/data.service.context.ts","components/chart/chart.container.tsx","components/years-selector/years-selector.component.tsx","components/years-selector/years-selector.container.ts","App.tsx","serviceWorker.ts","index.tsx","components/years-selector/years-selector.module.sass","App.module.sass"],"names":["module","exports","labelCache","Map","labelFormatter","v","res","get","dd","mm","split","map","Number","Date","toLocaleString","month","day","e","set","colors","getYearColor","year","parseDate","raw","formatString","parse","parseApiDate","formatDate","date","format","locale","ru","isValidDate","startYear","endYear","isValid","getFullYear","diffDates","d1","d2","differenceInMilliseconds","MonthTick","props","x","y","payload","value","width","height","fill","label","textProps","dominantBaseline","textAnchor","ChartComponent","data","years","ticks","Array","from","length","_","idx","undefined","minimumIntegerDigits","LineChart","className","styles","lineChart","CartesianGrid","strokeDasharray","XAxis","orientation","dataKey","axisLine","tick","YAxis","domain","tickCount","Tooltip","isAnimationActive","Line","type","dot","connectNulls","stroke","strokeWidth","IncludeYearAction","constructor","ExcludeYearAction","reducer","state","action","selectedYears","filter","initialState","StateContext","React","createContext","StateProvider","children","dispatch","useReducer","Provider","statisticService","smoothenLevels","levels","val","isLast","prev","level","next","diffFromPrev","diffFromNext","isSameSignDiff","correctedLevel","Math","abs","cachedDataToSortedObservations","archive","Object","entries","item","sort","o1","o2","hgraphDataService","Memoize","HgraphDataService","archive2020","response2021","fetch","response2022","data2021","json","data2022","typedData","rybinskData","reduce","ryb","items","dataArray","rawDataToSortedObservations","console","warn","Promise","resolve","getObservations","getLiveData","then","liveData","getCachedData","concat","this","cur","add","Set","keys","DataServiceContext","Chart","service","useContext","observations","setObservations","useState","isLoading","setLoading","useEffect","finally","chartData","observation","dateStr","yearStr","levelsByDate","find","byDate","push","YearsSelectorComponent","onInclude","onExclude","yearsList","handleChange","evt","checked","target","container","includes","labelProps","style","background","key","checkboxProps","input","onChange","YearsSelector","setYearsList","getYears","String","createElement","App","app","h1","interface","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","log","onUpdate","onSuccess","catch","error","ReactDOM","render","StrictMode","document","getElementById","URL","process","href","origin","addEventListener","headers","response","contentType","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"iFACAA,EAAOC,QAAU,CAAC,UAAY,2B,+zhDCD9B,MAAMC,EAA+B,IAAIC,IAE5BC,EAAkBC,IAC3B,IAAIC,EAAMJ,EAAWK,IAAIF,GACzB,IAAKC,EAAK,CACN,IACI,MAAOE,EAAIC,GAAMJ,EAAEK,MAAM,KAAKC,IAAIC,QAElCN,EADa,IAAIO,KAAK,KAAMJ,EAAK,EAAGD,GACzBM,eAAe,QAAS,CAC/BC,MAAO,OACPC,IAAK,YAEX,MAAOC,GACLX,EAAM,GAEVJ,EAAWgB,IAAIb,EAAGC,GAEtB,OAAOA,G,sBCjBX,MAAMa,EAAsC,CACxC,KAAQ,UACR,KAAQ,UACR,KAAQ,UACR,KAAQ,UACR,KAAQ,UACR,KAAQ,UACR,KAAQ,UACR,KAAQ,UACR,KAAQ,UACR,KAAQ,UACR,KAAQ,WAECC,EAAgBC,GAAiBF,EAAOE,IAAS,U,gDCPvD,MAAMC,EAAY,CAACC,EAAaC,IACnCC,YAAMF,EAAKC,EAAc,IAAIX,MAEpBa,EAAgBH,GAAgBD,EAAUC,EAAK,cAI/CI,EAAa,CAACC,EAAYJ,IACnCK,YAAOD,EAAMJ,EAAc,CAAEM,OAAQC,MAE5BC,EAAc,CACvBJ,GACCK,EAAWC,KAGRC,YAAQP,IACRA,EAAKQ,eAAiBH,GACtBL,EAAKQ,eAAiBF,EAIjBG,EAAY,CAACC,EAAUC,IAChCC,YAAyBF,EAAIC,G,YCNjC,MAAME,EAAaC,IACf,MAAM,EACFC,EADE,EAEFC,EACAC,SAAS,MAAEC,GAHT,MAIFC,EAJE,OAKFC,EALE,KAMFC,GACAP,EACEd,EAAON,EAAUwB,EAAO,SACxBI,EAAQvB,EAAWC,EAAM,OACzBuB,EAAY,CACdR,EAAGI,EAAQ,GAAKJ,EAChBC,EAAGI,EAAS,EAAI,GAAKJ,EACrBQ,iBAAkB,SAClBC,WAAY,SACZJ,QAEJ,OAAO,yBAAUE,EAAV,SAAsBD,KAGpBI,EAAkBZ,IAC3B,MAAM,KAAEa,EAAF,MAAQC,EAAR,MAAeT,EAAf,OAAsBC,GAAWN,EACjCe,EHxBNC,MAAMC,KACF,CAAEC,OAAQ,KACV,CAACC,EAAGC,IACA,MACAlD,OAAOkD,EAAM,GAAGhD,oBAAeiD,EAAW,CACtCC,qBAAsB,MGoBlC,OACI,eAACC,EAAA,EAAD,CACIC,UAAWC,IAAOC,UAClBrB,MAAOA,EACPC,OAAQA,EACRO,KAAMA,EAJV,UAMI,cAACc,EAAA,EAAD,CAAeC,gBAAgB,QAC/B,cAACC,EAAA,EAAD,CACIC,YAAY,MACZC,QAAQ,OACRC,UAAU,EACVjB,MAAOA,EACPkB,KAAM,cAAClC,EAAD,MAEV,cAACmC,EAAA,EAAD,CAAOC,OAAQ,CAAC,KAAM,KAAMC,UAAW,GAAIJ,UAAU,IACrD,cAACK,EAAA,EAAD,CACI3E,eAAgBA,EAChB4E,mBAAmB,IAEtBxB,EAAM7C,KAAKU,GACR,cAAC4D,EAAA,EAAD,CAEIC,KAAK,WACLT,QAASpD,EACT8D,KAAK,EACLH,mBAAmB,EACnBI,cAAc,EACdC,OAAQjE,EAAaC,GACrBiE,YAAa,KAPRjE,SChElB,MAAMkE,EAGTC,YAAqB1C,GAAgB,KAAhBA,QAAe,KAF3BoC,KAAO,eAKb,MAAMO,EAGTD,YAAqB1C,GAAgB,KAAhBA,QAAe,KAF3BoC,KAAO,eAOb,MAAMQ,EAAU,CAACC,EAAcC,KAClC,OAAQA,EAAOV,MACX,IAAK,cACD,MAAO,IACAS,EACHE,cAAe,IAAIF,EAAME,cAAeD,EAAO9C,QAGvD,IAAK,cACD,MAAO,IACA6C,EACHE,cAAeF,EAAME,cAAcC,QAC9BlD,GAAMA,IAAMgD,EAAO9C,SAIhC,QACI,OAAO6C,IAINI,EAAsB,CAC/BF,cAAe,ICrCNG,EAAeC,IAAMC,cAEhC,CAACH,EAAc,SAEJI,EAAgB,EAAGC,eAC5B,MAAOT,EAAOU,GAAYJ,IAAMK,WAAWZ,EAASK,GACpD,OACI,cAACC,EAAaO,SAAd,CAAuBzD,MAAO,CAAC6C,EAAOU,GAAtC,SACKD,K,wCCoBN,MAAMI,EAAmB,IA7BhC,MAAwB,cAAD,KAIVC,eAAkBC,GAChBA,EAAO/F,KAAI,CAACgG,EAAK7C,KACpB,MAAM8C,EAAS9C,IAAQ4C,EAAO9C,OAAS,EAGjCiD,EAFkB,IAAR/C,EAIV4C,EAAO5C,EAAM,GAAGgD,MADhBJ,EAAO5C,EAAM,GAAGgD,MAEhBC,EAAQH,EAERF,EAAO5C,EAAM,GAAGgD,MADhBJ,EAAO5C,EAAM,GAAGgD,MAEhBE,EAAeL,EAAIG,MAAQD,EAC3BI,EAAeN,EAAIG,MAAQC,EAC3BG,EAAiBF,EAAeC,EAAe,EAC/CE,EACFC,KAAKC,IAAIL,GAAgB,KACzBI,KAAKC,IAAIJ,GAAgB,KACzBC,GACOL,EAAOE,GAAQ,EAChBJ,EAAIG,MACd,MAAO,IAAKH,EAAKG,MAAOK,Q,UC2DpC,SAASG,EACLC,EACAtF,EACAC,GAWA,OATkBwB,MAAMC,KAAK6D,OAAOC,QAAQF,IAGvC5G,KAAI,EAAEiB,EAAMkF,MAAR,OACDlF,MLnFqBL,EKmFEK,ELnFcN,EAAUC,EAAK,eKoFpDuF,SLpFqBvF,SKsFxBuE,QAAQ4B,GAAS1F,EAAY0F,EAAK9F,KAAM,CAACK,EAAWC,MAEnCyF,MAAK,CAACC,EAAIC,IAAOxF,EAAUuF,EAAGhG,KAAMiG,EAAGjG,OAAS,ICxFnE,MAAMkG,EAAoB,IDSjC,EAoBKC,cApBL,EA6BKA,cA7BL,EAAO,MAAMC,EACmB,uBAGxB,MAAO,IAFWV,EAA+BC,EAAS,KAAM,SACjDD,EAA+BW,EAAa,KAAM,OAIrC,2BAC5B,IACI,MAAMC,QAAqBC,MAAM,kCAC3BC,QAAqBD,MAAM,kCAC3BE,QAAiBH,EAAaI,OAC9BC,QAAiBH,EAAaE,OACpC,OA4BZ,SACIE,EACAvG,EACAC,GAEA,MAAMuG,EAAcD,EAAUE,QAAO,CAAC/H,EAAK+G,KACvC,MAAMiB,EAAMjB,EAAKkB,MAAM,0DAIvB,OAHID,GACAhI,EAAIO,IAAIwG,EAAK9F,KAAM+G,EAAI,IAEpBhI,IACR,IAAIR,KACD0I,EAAYnF,MAAMC,KAAK8E,EAAYhB,WASzC,OAPuBoB,EAClBlI,KAAI,EAAEiB,EAAMkF,MAAR,CACDlF,KAAMF,EAAaE,GACnBkF,YAEHhB,QAAQ4B,GAAS1F,EAAY0F,EAAK9F,KAAM,CAACK,EAAWC,MAEnCyF,MAAK,CAACC,EAAIC,IAAOxF,EAAUuF,EAAGhG,KAAMiG,EAAGjG,OAAS,IAjDvDkH,CAA4B,IAAIT,KAAYE,GAAW,KAAM,MACtE,MAAOtH,GAEL,OADA8H,QAAQC,KAAK,0BACNC,QAAQC,QAAQ,KAK/BC,kBACI,OAAOnB,EAAkBoB,cACpBC,MAAMC,GACHtB,EAAkBuB,gBAAgBC,OAAOF,KAE5CD,KAAK7C,EAAiBC,gBAIjB,iBAOV,MAAO,WANoBgD,KAAKN,mBACFT,QAC1B,CAACxH,EAAKwI,IAAQxI,EAAIyI,IAAID,EAAI9H,KAAKQ,gBAC/B,IAAIwH,KAGYC,UArC5B,yOCRaC,EACT7D,IAAMC,cAA2B4B,GCNxBiC,EAAQ,KACjB,MAAMC,EAAUC,qBAAWH,IACpBI,EAAcC,GAAmBC,mBAAwB,KACzDC,EAAWC,GAAcF,oBAAS,KAClC,cAAEvE,IAAmBoE,qBAAWjE,GAEvCuE,qBAAU,KACNP,EACKb,kBACAE,KAAKc,GACLK,SAAQ,IAAMF,GAAW,OAC/B,CAACN,IAEJ,MAAMS,EAAYP,EACbxB,QAAoB,CAACpI,EAAKoK,KACvB,MAAMC,EAAUhJ,EAAW+I,EAAY9I,KAAM,SACvCgJ,EAAUjJ,EAAW+I,EAAY9I,KAAM,QAC7C,IAAIiJ,EAAevK,EAAIwK,MAAMC,GAAWA,EAAOnJ,OAAS+I,IAMxD,OALKE,IACDA,EAAe,CAAEjJ,KAAM+I,GACvBrK,EAAI0K,KAAKH,IAEbA,EAAaD,GAAWF,EAAY5D,MAC7BxG,IACR,IAEFwF,QAAQzF,GAAiB,UAAXA,EAAEuB,OAErB,OAAOyI,EACH,6CAEA,cAAC,IAAD,UACK,EAAGtH,QAAOC,YACP,cAACM,EAAD,CACIC,KAAMkH,EACNjH,MAAOqC,EACP7C,OAAQA,EACRD,MAAOA,O,sBChCpB,MAAMkI,GAAyB,EAClCC,YACAC,YACAC,YACAvF,oBAEA,MAAMwF,EAAgBC,IAClB,MAAM,QAAEC,EAAF,MAAWzI,GAAUwI,EAAIE,OAC/BD,EAAUL,EAAUpI,GAASqI,EAAUrI,IAG3C,OACI,qBAAKoB,UAAWC,KAAOsH,UAAvB,SACKL,EAAUzK,KAAKiC,IACZ,MAAM2I,EAAU1F,EAAc6F,SAAS9I,GACjC+I,EAAa,CACfzH,UAAY,GAAEC,KAAOjB,SAASqI,GAAWpH,KAAOoH,UAChDK,MAAO,CACHC,WAAa,GAAEN,EAAUnK,EAAawB,GAAK,UAE/CkJ,IAAKlJ,GAEHmJ,EAAgB,CAClB7G,KAAM,WACNhB,UAAWC,KAAO6H,MAClBlJ,MAAOF,EACP2I,UACAU,SAAUZ,GAEd,OACI,2BAAWM,EAAX,UACI,0BAAWI,IADf,IACkCnJ,WClCzCsJ,GAAgB,KACzB,MAAMlC,EAAUC,qBAAWH,IACpBsB,EAAWe,GAAgB/B,mBAAmB,MAC9C,cAAEvE,GAAiBQ,GAAY4D,qBAAWjE,GACjDuE,qBAAU,KACNP,EAAQoC,WAAW/C,MAAM7F,GAAU2I,EAAa3I,EAAM7C,IAAI0L,aAC3D,CAACrC,IAKJ,OAAO/D,IAAMqG,cAAcrB,GAAwB,CAC/CC,UAJe7J,GAAiBgF,EAAS,IAAId,EAAkBlE,IAK/D8J,UAJe9J,GAAiBgF,EAAS,IAAIZ,EAAkBpE,IAK/D+J,YACAvF,mBCGO0G,OApBf,WACI,OACI,qBAAKrI,UAAWC,IAAOqI,IAAvB,SACI,eAACrG,EAAD,WACI,oBAAIjC,UAAWC,IAAOsI,GAAtB,yKACA,cAAC3C,EAAmBvD,SAApB,CAA6BzD,MAAOgF,EAApC,SACI,sBAAK5D,UAAWC,IAAOuI,UAAvB,UACI,qBAAKd,MAAO,CAAE7I,MAAO,QAArB,SACI,cAACgH,EAAD,MAEJ,8BACI,cAACmC,GAAD,iBCN5B,MAAMS,GAAcC,QACa,cAA7BC,OAAOC,SAASC,UAEa,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACrB,2DA8CR,SAASC,GAAgBC,EAAeC,GACpCC,UAAUC,cACLC,SAASJ,GACT7D,MAAKkE,IACFA,EAAaC,cAAgB,KACzB,MAAMC,EAAmBF,EAAaG,WACd,MAApBD,IAGJA,EAAiBE,cAAgB,KACE,cAA3BF,EAAiB9H,QACbyH,UAAUC,cAAcO,YAIxB7E,QAAQ8E,IACJ,iHAKAV,GAAUA,EAAOW,UACjBX,EAAOW,SAASP,KAMpBxE,QAAQ8E,IAAI,sCAGRV,GAAUA,EAAOY,WACjBZ,EAAOY,UAAUR,WAOxCS,OAAMC,IACHlF,QAAQkF,MAAM,4CAA6CA,MClGvEC,IAASC,OACL,cAAC,IAAMC,WAAP,UACI,cAAC,GAAD,MAEJC,SAASC,eAAe,SDiBrB,SAAkBnB,GACrB,GAA6C,kBAAmBC,UAAW,CAMvE,GAJkB,IAAImB,IAClBC,IACA3B,OAAOC,SAAS2B,MAENC,SAAW7B,OAAOC,SAAS4B,OAIrC,OAGJ7B,OAAO8B,iBAAiB,QAAQ,KAC5B,MAAMzB,EAAS,sBAEXP,KAgEhB,SAAiCO,EAAeC,GAE5ChF,MAAM+E,EAAO,CACT0B,QAAS,CAAE,iBAAkB,YAE5BvF,MAAKwF,IAEF,MAAMC,EAAcD,EAASD,QAAQrO,IAAI,gBAEjB,MAApBsO,EAASE,QACO,MAAfD,IAA8D,IAAvCA,EAAYE,QAAQ,cAG5C5B,UAAUC,cAAc4B,MAAM5F,MAAKkE,IAC/BA,EAAa2B,aAAa7F,MAAK,KAC3BwD,OAAOC,SAASqC,eAKxBlC,GAAgBC,EAAOC,MAG9Ba,OAAM,KACHjF,QAAQ8E,IACJ,oEAvFAuB,CAAwBlC,EAAOC,GAI/BC,UAAUC,cAAc4B,MAAM5F,MAAK,KAC/BN,QAAQ8E,IACJ,iHAMRZ,GAAgBC,EAAOC,OC7CvCE,I,mBCZArN,EAAOC,QAAU,CAAC,UAAY,kCAAkC,MAAQ,8BAA8B,QAAU,gCAAgC,MAAQ,gC,mBCAxJD,EAAOC,QAAU,CAAC,IAAM,iBAAiB,UAAY,uBAAuB,GAAK,mB","file":"static/js/main.a624a764.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"lineChart\":\"chart_lineChart__31CP1\"};","const labelCache: Map<any, string> = new Map();\r\n\r\nexport const labelFormatter = (v: any) => {\r\n    let res = labelCache.get(v);\r\n    if (!res) {\r\n        try {\r\n            const [dd, mm] = v.split('.').map(Number);\r\n            const date = new Date(2020, mm - 1, dd);\r\n            res = date.toLocaleString('ru-RU', {\r\n                month: 'long',\r\n                day: 'numeric',\r\n            });\r\n        } catch (e) {\r\n            res = '';\r\n        }\r\n        labelCache.set(v, res);\r\n    }\r\n    return res;\r\n};\r\n\r\nexport const getTimelineTicks = () =>\r\n    Array.from(\r\n        { length: 12 },\r\n        (_, idx) =>\r\n            '01.' +\r\n            Number(idx + 1).toLocaleString(undefined, {\r\n                minimumIntegerDigits: 2,\r\n            }),\r\n    );\r\n","const colors: { [index: string]: string } = {\r\n    '2014': '#9BC53D',\r\n    '2015': '#C3423F',\r\n    '2016': '#0D2866',\r\n    '2017': '#8A2691',\r\n    '2018': '#19535F',\r\n    '2019': '#7B2D26',\r\n    '2020': '#3B7A0B',\r\n    '2021': '#F1D302',\r\n    '2022': '#9BC53D',\r\n    '2023': '#9BC53D',\r\n    '2024': '#9BC53D',\r\n};\r\nexport const getYearColor = (year: string) => colors[year] || '#000000';\r\n","import parse from 'date-fns/parse';\nimport format from 'date-fns/format';\nimport ru from 'date-fns/locale/ru';\nimport isValid from 'date-fns/isValid';\nimport differenceInMilliseconds from 'date-fns/differenceInMilliseconds';\n\nexport const parseDate = (raw: string, formatString: string) =>\n    parse(raw, formatString, new Date());\n\nexport const parseApiDate = (raw: string) => parseDate(raw, 'dd.MM.yyyy');\n\nexport const parseArchiveDate = (raw: string) => parseDate(raw, 'yyyy-MM-dd');\n\nexport const formatDate = (date: Date, formatString: string) =>\n    format(date, formatString, { locale: ru });\n\nexport const isValidDate = (\n    date: Date,\n    [startYear, endYear]: [number, number],\n) => {\n    return (\n        isValid(date) &&\n        date.getFullYear() >= startYear &&\n        date.getFullYear() <= endYear\n    );\n};\n\nexport const diffDates = (d1: Date, d2: Date) =>\n    differenceInMilliseconds(d1, d2);\n\nexport const getDefaultYear = () => {\n    const today = new Date();\n    const year = today.getFullYear();\n    const month = today.getMonth();\n    const defaultYear = month > 2 ? year : year - 1;\n    return defaultYear.toString();\n};\n","import React from 'react';\r\nimport {\r\n    CartesianGrid,\r\n    Line,\r\n    LineChart,\r\n    Tooltip,\r\n    XAxis,\r\n    YAxis,\r\n} from 'recharts';\r\nimport { labelFormatter, getTimelineTicks } from './chart.utils';\r\nimport styles from './chart.module.sass';\r\nimport { getYearColor } from '../../utils/color.utils';\r\nimport { formatDate, parseDate } from '../../utils/date.utils';\r\n\r\nexport type ChartData = { date: string; [year: string]: any };\r\nexport type ChartProps = {\r\n    data: ChartData[];\r\n    years: string[];\r\n    width: number;\r\n    height: number;\r\n};\r\n\r\nconst MonthTick = (props: any) => {\r\n    const {\r\n        x,\r\n        y,\r\n        payload: { value },\r\n        width,\r\n        height,\r\n        fill,\r\n    } = props;\r\n    const date = parseDate(value, 'dd.MM');\r\n    const label = formatDate(date, 'MMM');\r\n    const textProps = {\r\n        x: width / 24 + x,\r\n        y: height / 2 - 18 + y,\r\n        dominantBaseline: 'middle',\r\n        textAnchor: 'middle',\r\n        fill,\r\n    };\r\n    return <text {...textProps}>{label}</text>;\r\n};\r\n\r\nexport const ChartComponent = (props: ChartProps) => {\r\n    const { data, years, width, height } = props;\r\n    const ticks = getTimelineTicks();\r\n    return (\r\n        <LineChart\r\n            className={styles.lineChart}\r\n            width={width}\r\n            height={height}\r\n            data={data}\r\n        >\r\n            <CartesianGrid strokeDasharray=\"3 5\" />\r\n            <XAxis\r\n                orientation=\"top\"\r\n                dataKey=\"date\"\r\n                axisLine={false}\r\n                ticks={ticks}\r\n                tick={<MonthTick />}\r\n            />\r\n            <YAxis domain={[98.4, 102]} tickCount={19} axisLine={false} />\r\n            <Tooltip\r\n                labelFormatter={labelFormatter}\r\n                isAnimationActive={false}\r\n            />\r\n            {years.map((year) => (\r\n                <Line\r\n                    key={year}\r\n                    type=\"monotone\"\r\n                    dataKey={year}\r\n                    dot={false}\r\n                    isAnimationActive={false}\r\n                    connectNulls={true}\r\n                    stroke={getYearColor(year)}\r\n                    strokeWidth={1.5}\r\n                />\r\n            ))}\r\n        </LineChart>\r\n    );\r\n};\r\n","export type State = {\r\n    selectedYears: string[];\r\n};\r\n\r\nexport class IncludeYearAction {\r\n    readonly type = 'IncludeYear';\r\n\r\n    constructor(readonly value: string) {}\r\n}\r\n\r\nexport class ExcludeYearAction {\r\n    readonly type = 'ExcludeYear';\r\n\r\n    constructor(readonly value: string) {}\r\n}\r\n\r\nexport type Action = IncludeYearAction | ExcludeYearAction;\r\n\r\nexport const reducer = (state: State, action: Action) => {\r\n    switch (action.type) {\r\n        case 'IncludeYear':\r\n            return {\r\n                ...state,\r\n                selectedYears: [...state.selectedYears, action.value],\r\n            };\r\n\r\n        case 'ExcludeYear':\r\n            return {\r\n                ...state,\r\n                selectedYears: state.selectedYears.filter(\r\n                    (y) => y !== action.value,\r\n                ),\r\n            };\r\n\r\n        default:\r\n            return state;\r\n    }\r\n};\r\n\r\nexport const initialState: State = {\r\n    selectedYears: [],\r\n};\r\n","import { initialState, reducer, Action, State } from './state.reducer';\r\nimport React, { ReactNode } from 'react';\r\n\r\nexport const StateContext = React.createContext<\r\n    [State, (action: Action) => void]\r\n>([initialState, () => {}]);\r\n\r\nexport const StateProvider = ({ children }: { children: ReactNode }) => {\r\n    const [state, dispatch] = React.useReducer(reducer, initialState);\r\n    return (\r\n        <StateContext.Provider value={[state, dispatch]}>\r\n            {children}\r\n        </StateContext.Provider>\r\n    );\r\n};\r\n","import { Observation } from './observation.model';\r\n\r\nclass StatisticService {\r\n    /**\r\n     * Check if\r\n     */\r\n    readonly smoothenLevels = (levels: Observation[]): Observation[] => {\r\n        return levels.map((val, idx) => {\r\n            const isLast = idx === levels.length - 1;\r\n            const isFirst = idx === 0;\r\n            // first/last value is checked against single next/prev value (not fully accurate logic but let it be)\r\n            const prev = !isFirst\r\n                ? levels[idx - 1].level\r\n                : levels[idx + 1].level;\r\n            const next = !isLast\r\n                ? levels[idx + 1].level\r\n                : levels[idx - 1].level;\r\n            const diffFromPrev = val.level - prev;\r\n            const diffFromNext = val.level - next;\r\n            const isSameSignDiff = diffFromPrev * diffFromNext > 0;\r\n            const correctedLevel =\r\n                Math.abs(diffFromPrev) > 0.05 &&\r\n                Math.abs(diffFromNext) > 0.05 &&\r\n                isSameSignDiff\r\n                    ? (prev + next) / 2\r\n                    : val.level;\r\n            return { ...val, level: correctedLevel };\r\n        });\r\n    };\r\n}\r\n\r\nexport const statisticService = new StatisticService();\r\n","import { Memoize } from 'typescript-memoize';\r\nimport archive from '../data/ryb2019.json';\r\nimport archive2020 from '../data/ryb2020.json';\r\nimport { DataService } from './data.service.context';\r\nimport { Observation } from './observation.model';\r\nimport { statisticService } from './statistic.service';\r\nimport {\r\n    parseApiDate,\r\n    isValidDate,\r\n    diffDates,\r\n    parseArchiveDate,\r\n} from '../utils/date.utils';\r\n\r\ntype HgraphDataItem = {\r\n    date: string;\r\n    items: { [key: string]: number[] };\r\n};\r\n\r\ntype Archive = { [key: string]: number };\r\n\r\nexport class HgraphDataService implements DataService {\r\n    private static getCachedData(): Observation[] {\r\n        const until2020 = cachedDataToSortedObservations(archive, 2014, 2019);\r\n        const in2020 = cachedDataToSortedObservations(archive2020, 2020, 2020);\r\n        return [...until2020, ...in2020];\r\n    }\r\n\r\n    private static async getLiveData(): Promise<Observation[]> {\r\n        try {\r\n            const response2021 = await fetch('http://hgraph.ru/api/year/2021');\r\n            const response2022 = await fetch('http://hgraph.ru/api/year/2022');\r\n            const data2021 = await response2021.json();\r\n            const data2022 = await response2022.json();\r\n            return rawDataToSortedObservations([...data2021,...data2022], 2021, 2022);\r\n        } catch (e) {\r\n            console.warn(\"Couldn't get live data\");\r\n            return Promise.resolve([]);\r\n        }\r\n    }\r\n\r\n    @Memoize()\r\n    getObservations(): Promise<Observation[]> {\r\n        return HgraphDataService.getLiveData()\r\n            .then((liveData) =>\r\n                HgraphDataService.getCachedData().concat(liveData),\r\n            )\r\n            .then(statisticService.smoothenLevels);\r\n    }\r\n\r\n    @Memoize()\r\n    async getYears(): Promise<number[]> {\r\n        const observations = await this.getObservations();\r\n        const yearsSet = observations.reduce<Set<number>>(\r\n            (set, cur) => set.add(cur.date.getFullYear()),\r\n            new Set(),\r\n        );\r\n\r\n        return [...yearsSet.keys()];\r\n    }\r\n}\r\n\r\nfunction rawDataToSortedObservations(\r\n    typedData: HgraphDataItem[],\r\n    startYear: number,\r\n    endYear: number,\r\n): Observation[] {\r\n    const rybinskData = typedData.reduce((map, item) => {\r\n        const ryb = item.items['Рыбинское'];\r\n        if (ryb) {\r\n            map.set(item.date, ryb[0]);\r\n        }\r\n        return map;\r\n    }, new Map<string, number>());\r\n    const dataArray = Array.from(rybinskData.entries());\r\n\r\n    const convertedArray = dataArray\r\n        .map(([date, level]) => ({\r\n            date: parseApiDate(date),\r\n            level,\r\n        }))\r\n        .filter((item) => isValidDate(item.date, [startYear, endYear]));\r\n\r\n    return convertedArray.sort((o1, o2) => diffDates(o1.date, o2.date) || 0);\r\n}\r\n\r\nfunction cachedDataToSortedObservations(\r\n    archive: Archive,\r\n    startYear: number,\r\n    endYear: number,\r\n): Observation[] {\r\n    const dataArray = Array.from(Object.entries(archive));\r\n\r\n    const convertedArray = dataArray\r\n        .map(([date, level]) => ({\r\n            date: parseArchiveDate(date),\r\n            level,\r\n        }))\r\n        .filter((item) => isValidDate(item.date, [startYear, endYear]));\r\n\r\n    return convertedArray.sort((o1, o2) => diffDates(o1.date, o2.date) || 0);\r\n}\r\n","import React from 'react';\r\nimport { HgraphDataService } from './hgraph.data.service';\r\n\r\nimport { Observation } from './observation.model';\r\n\r\nexport interface DataService {\r\n    getObservations(): Promise<Observation[]>;\r\n\r\n    getYears(): Promise<number[]>;\r\n}\r\n\r\nexport const hgraphDataService = new HgraphDataService();\r\nexport const DataServiceContext =\r\n    React.createContext<DataService>(hgraphDataService);\r\n","import React, { useContext, useState, useEffect } from 'react';\r\nimport AutoSizer from 'react-virtualized-auto-sizer';\r\nimport { ChartComponent, ChartData } from './chart.component';\r\nimport { StateContext } from '../../contexts/state/state.context';\r\nimport { DataServiceContext, Observation } from '../../services';\r\nimport { formatDate } from '../../utils/date.utils';\r\n\r\nexport const Chart = () => {\r\n    const service = useContext(DataServiceContext);\r\n    const [observations, setObservations] = useState<Observation[]>([]);\r\n    const [isLoading, setLoading] = useState(true);\r\n    const [{ selectedYears }] = useContext(StateContext);\r\n\r\n    useEffect(() => {\r\n        service\r\n            .getObservations()\r\n            .then(setObservations)\r\n            .finally(() => setLoading(false));\r\n    }, [service]);\r\n\r\n    const chartData = observations\r\n        .reduce<ChartData[]>((res, observation) => {\r\n            const dateStr = formatDate(observation.date, 'dd.MM');\r\n            const yearStr = formatDate(observation.date, 'yyyy');\r\n            let levelsByDate = res.find((byDate) => byDate.date === dateStr);\r\n            if (!levelsByDate) {\r\n                levelsByDate = { date: dateStr };\r\n                res.push(levelsByDate);\r\n            }\r\n            levelsByDate[yearStr] = observation.level;\r\n            return res;\r\n        }, [])\r\n        // because we must have consistent x-axis for all years\r\n        .filter((v) => v.date !== '29.02');\r\n\r\n    return isLoading ? (\r\n        <div>Loading...</div>\r\n    ) : (\r\n        <AutoSizer>\r\n            {({ width, height }) => (\r\n                <ChartComponent\r\n                    data={chartData}\r\n                    years={selectedYears}\r\n                    height={height}\r\n                    width={width}\r\n                />\r\n            )}\r\n        </AutoSizer>\r\n    );\r\n};\r\n","import React from 'react';\r\n\r\nimport styles from './years-selector.module.sass';\r\nimport { getYearColor } from '../../utils/color.utils';\r\n\r\ntype Props = {\r\n    onInclude: (value: string) => void;\r\n    onExclude: (value: string) => void;\r\n    yearsList: string[];\r\n    selectedYears: string[];\r\n};\r\n\r\nexport const YearsSelectorComponent = ({\r\n    onInclude,\r\n    onExclude,\r\n    yearsList,\r\n    selectedYears,\r\n}: Props) => {\r\n    const handleChange = (evt: React.ChangeEvent<HTMLInputElement>) => {\r\n        const { checked, value } = evt.target;\r\n        checked ? onInclude(value) : onExclude(value);\r\n    };\r\n\r\n    return (\r\n        <div className={styles.container}>\r\n            {yearsList.map((y) => {\r\n                const checked = selectedYears.includes(y);\r\n                const labelProps = {\r\n                    className: `${styles.label} ${checked && styles.checked}`,\r\n                    style: {\r\n                        background: `${checked ? getYearColor(y) : 'none'}`,\r\n                    },\r\n                    key: y,\r\n                };\r\n                const checkboxProps = {\r\n                    type: 'checkbox',\r\n                    className: styles.input,\r\n                    value: y,\r\n                    checked,\r\n                    onChange: handleChange,\r\n                };\r\n                return (\r\n                    <label {...labelProps}>\r\n                        <input {...checkboxProps} /> {y}\r\n                    </label>\r\n                );\r\n            })}\r\n        </div>\r\n    );\r\n};\r\n\r\n\r\n","import React, { useContext, useEffect, useState } from 'react';\r\nimport { DataServiceContext } from '../../services';\r\nimport { YearsSelectorComponent } from './years-selector.component';\r\nimport { StateContext } from '../../contexts/state/state.context';\r\nimport {\r\n    ExcludeYearAction,\r\n    IncludeYearAction,\r\n} from '../../contexts/state/state.reducer';\r\n\r\nexport const YearsSelector = () => {\r\n    const service = useContext(DataServiceContext);\r\n    const [yearsList, setYearsList] = useState<string[]>([]);\r\n    const [{ selectedYears }, dispatch] = useContext(StateContext);\r\n    useEffect(() => {\r\n        service.getYears().then((years) => setYearsList(years.map(String)));\r\n    }, [service]);\r\n\r\n    const onInclude = (year: string) => dispatch(new IncludeYearAction(year));\r\n    const onExclude = (year: string) => dispatch(new ExcludeYearAction(year));\r\n\r\n    return React.createElement(YearsSelectorComponent, {\r\n        onInclude,\r\n        onExclude,\r\n        yearsList,\r\n        selectedYears,\r\n    });\r\n};\r\n","import React from 'react';\r\n\r\nimport styles from './App.module.sass';\r\nimport { Chart, YearsSelector } from './components';\r\nimport { DataServiceContext, hgraphDataService } from './services';\r\nimport { StateProvider } from './contexts/state/state.context';\r\n\r\nfunction App() {\r\n    return (\r\n        <div className={styles.app}>\r\n            <StateProvider>\r\n                <h1 className={styles.h1}>Уровень воды в Рыбинском вдхр.</h1>\r\n                <DataServiceContext.Provider value={hgraphDataService}>\r\n                    <div className={styles.interface}>\r\n                        <div style={{ width: '100%' }}>\r\n                            <Chart />\r\n                        </div>\r\n                        <div>\r\n                            <YearsSelector />\r\n                        </div>\r\n                    </div>\r\n                </DataServiceContext.Provider>\r\n            </StateProvider>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n    window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n        /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/,\r\n    ),\r\n);\r\n\r\ntype Config = {\r\n    onSuccess?: (registration: ServiceWorkerRegistration) => void;\r\n    onUpdate?: (registration: ServiceWorkerRegistration) => void;\r\n};\r\n\r\nexport function register(config?: Config) {\r\n    if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n        // The URL constructor is available in all browsers that support SW.\r\n        const publicUrl = new URL(\r\n            process.env.PUBLIC_URL,\r\n            window.location.href,\r\n        );\r\n        if (publicUrl.origin !== window.location.origin) {\r\n            // Our service worker won't work if PUBLIC_URL is on a different origin\r\n            // from what our page is served on. This might happen if a CDN is used to\r\n            // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n            return;\r\n        }\r\n\r\n        window.addEventListener('load', () => {\r\n            const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n            if (isLocalhost) {\r\n                // This is running on localhost. Let's check if a service worker still exists or not.\r\n                checkValidServiceWorker(swUrl, config);\r\n\r\n                // Add some additional logging to localhost, pointing developers to the\r\n                // service worker/PWA documentation.\r\n                navigator.serviceWorker.ready.then(() => {\r\n                    console.log(\r\n                        'This web app is being served cache-first by a service ' +\r\n                        'worker. To learn more, visit https://bit.ly/CRA-PWA',\r\n                    );\r\n                });\r\n            } else {\r\n                // Is not localhost. Just register service worker\r\n                registerValidSW(swUrl, config);\r\n            }\r\n        });\r\n    }\r\n}\r\n\r\nfunction registerValidSW(swUrl: string, config?: Config) {\r\n    navigator.serviceWorker\r\n        .register(swUrl)\r\n        .then(registration => {\r\n            registration.onupdatefound = () => {\r\n                const installingWorker = registration.installing;\r\n                if (installingWorker == null) {\r\n                    return;\r\n                }\r\n                installingWorker.onstatechange = () => {\r\n                    if (installingWorker.state === 'installed') {\r\n                        if (navigator.serviceWorker.controller) {\r\n                            // At this point, the updated precached content has been fetched,\r\n                            // but the previous service worker will still serve the older\r\n                            // content until all client tabs are closed.\r\n                            console.log(\r\n                                'New content is available and will be used when all ' +\r\n                                'tabs for this page are closed. See https://bit.ly/CRA-PWA.',\r\n                            );\r\n\r\n                            // Execute callback\r\n                            if (config && config.onUpdate) {\r\n                                config.onUpdate(registration);\r\n                            }\r\n                        } else {\r\n                            // At this point, everything has been precached.\r\n                            // It's the perfect time to display a\r\n                            // \"Content is cached for offline use.\" message.\r\n                            console.log('Content is cached for offline use.');\r\n\r\n                            // Execute callback\r\n                            if (config && config.onSuccess) {\r\n                                config.onSuccess(registration);\r\n                            }\r\n                        }\r\n                    }\r\n                };\r\n            };\r\n        })\r\n        .catch(error => {\r\n            console.error('Error during service worker registration:', error);\r\n        });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\r\n    // Check if the service worker can be found. If it can't reload the page.\r\n    fetch(swUrl, {\r\n        headers: { 'Service-Worker': 'script' },\r\n    })\r\n        .then(response => {\r\n            // Ensure service worker exists, and that we really are getting a JS file.\r\n            const contentType = response.headers.get('content-type');\r\n            if (\r\n                response.status === 404 ||\r\n                (contentType != null && contentType.indexOf('javascript') === -1)\r\n            ) {\r\n                // No service worker found. Probably a different app. Reload the page.\r\n                navigator.serviceWorker.ready.then(registration => {\r\n                    registration.unregister().then(() => {\r\n                        window.location.reload();\r\n                    });\r\n                });\r\n            } else {\r\n                // Service worker found. Proceed as normal.\r\n                registerValidSW(swUrl, config);\r\n            }\r\n        })\r\n        .catch(() => {\r\n            console.log(\r\n                'No internet connection found. App is running in offline mode.',\r\n            );\r\n        });\r\n}\r\n\r\nexport function unregister() {\r\n    if ('serviceWorker' in navigator) {\r\n        navigator.serviceWorker.ready\r\n            .then(registration => {\r\n                registration.unregister();\r\n            })\r\n            .catch(error => {\r\n                console.error(error.message);\r\n            });\r\n    }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.sass';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n    <React.StrictMode>\r\n        <App />\r\n    </React.StrictMode>,\r\n    document.getElementById('root'),\r\n);\r\n\r\nserviceWorker.register();\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"years-selector_container__1GW1M\",\"label\":\"years-selector_label__3rWxP\",\"checked\":\"years-selector_checked__31KHa\",\"input\":\"years-selector_input__kwanH\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"app\":\"App_app__4HWOX\",\"interface\":\"App_interface__2-f8B\",\"h1\":\"App_h1__2o6DZ\"};"],"sourceRoot":""}