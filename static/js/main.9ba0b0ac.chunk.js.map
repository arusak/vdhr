{"version":3,"sources":["services/hgraph.data.service.ts","services/data.service.context.ts","components/chart.component.tsx","components/chart.container.tsx","components/controls/years-selection.container.tsx","App.tsx","services/date-time.utils.ts","serviceWorker.ts","index.tsx"],"names":["rawDataToSortedLevels","raw","startYear","endYear","rybinskData","reduce","map","item","ryb","items","set","date","Map","Array","from","entries","level","DateTime","fromFormat","filter","isValid","year","sort","o1","o2","diff","toObject","milliseconds","hgraphDataService","Memoize","HgraphDataService","data","fetch","response","json","getLevels","getLiveData","then","liveData","getCachedData","concat","getYears","levels","yearsMap","cur","get","push","keys","DataServiceContext","React","createContext","colors","ChartComponent","props","years","width","height","strokeDasharray","dataKey","ticks","fill","_","idx","Number","toLocaleString","undefined","minimumIntegerDigits","domain","tickCount","key","type","dot","isAnimationActive","stroke","Chart","Component","constructor","super","state","service","this","context","componentDidMount","setState","render","chartData","res","dateStr","toFormat","yearStr","levelsByDate","find","byDate","String","contextType","YearsSelection","selectedYears","defaultYear","handleChange","multiple","value","size","length","onChange","evt","target","options","option","selected","App","useState","setYears","today","local","month","minus","getDefaultYear","className","style","display","flex","Provider","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","onUpdate","onSuccess","catch","error","ReactDOM","StrictMode","document","getElementById","URL","process","href","origin","addEventListener","headers","contentType","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.9ba0b0ac.chunk.js","sourcesContent":["import { DateTime } from 'luxon';\r\nimport { Memoize } from 'typescript-memoize';\r\nimport { LevelsByYearMap } from '../components/chart.component';\r\nimport data from '../data/all.json';\r\nimport { DataService } from './data.service.context';\r\nimport { Level } from './levels.model';\r\n\r\ntype HgraphDataItem = {\r\n\tdate: string;\r\n\titems: { [key: string]: number[] };\r\n}\r\nconst FIRST_YEAR = 2014;\r\nconst LAST_CACHE_YEAR = 2019;\r\n\r\nexport class HgraphDataService implements DataService {\r\n\tprivate static getCachedData(): Level[] {\r\n\t\treturn rawDataToSortedLevels(data, FIRST_YEAR, LAST_CACHE_YEAR);\r\n\t};\r\n\r\n\tprivate static async getLiveData(): Promise<Level[]> {\r\n\t\tconst response = await fetch('http://hgraph.ru/api/year/2020');\r\n\t\tconst data = await response.json();\r\n\t\treturn rawDataToSortedLevels(data, 2020, 2020);\r\n\t}\r\n\r\n\t@Memoize()\r\n\tgetLevels(): Promise<Level[]> {\r\n\t\treturn HgraphDataService.getLiveData().then(liveData => HgraphDataService.getCachedData().concat(liveData));\r\n\t}\r\n\r\n\t@Memoize()\r\n\tasync getYears(): Promise<number[]> {\r\n\t\tconst levels = await this.getLevels();\r\n\t\tconst yearsMap = levels.reduce<LevelsByYearMap>((map: LevelsByYearMap, cur: Level) => {\r\n\t\t\tconst year = cur.date.year;\r\n\t\t\tconst levels = map.get(year) || map.set(year, []).get(year);\r\n\t\t\tlevels!.push(cur);\r\n\t\t\treturn map;\r\n\t\t}, new Map());\r\n\r\n\t\treturn [...yearsMap.keys()];\r\n\t}\r\n}\r\n\r\nfunction rawDataToSortedLevels(raw: any, startYear: number, endYear: number) {\r\n\tconst typedData = raw as HgraphDataItem[];\r\n\tconst rybinskData = typedData.reduce((map, item) => {\r\n\t\tconst ryb = item.items['Рыбинское'];\r\n\t\tif (ryb) {\r\n\t\t\tmap.set(item.date, ryb[0]);\r\n\t\t}\r\n\t\treturn map;\r\n\t}, new Map<string, number>());\r\n\tconst dataArray = Array.from(rybinskData.entries());\r\n\r\n\tconst convertedArray = dataArray.map(([date, level]) => ({\r\n\t\tdate: DateTime.fromFormat(date, 'dd.MM.yyyy'),\r\n\t\tlevel,\r\n\t})).filter(item => item.date.isValid).filter(item => item.date.year >= startYear && item.date.year <= endYear);\r\n\r\n\treturn convertedArray.sort((o1, o2) => {\r\n\t\treturn o1.date.diff(o2.date).toObject().milliseconds || 0;\r\n\t});\r\n\r\n}\r\n","import React from 'react';\r\nimport { HgraphDataService } from './hgraph.data.service';\r\n\r\nimport { Level } from './levels.model';\r\n\r\nexport interface DataService {\r\n\tgetLevels(): Promise<Level[]>;\r\n\tgetYears(): Promise<number[]>;\r\n}\r\n\r\nexport const hgraphDataService = new HgraphDataService();\r\nexport const DataServiceContext = React.createContext<DataService>(hgraphDataService);\r\n","import React from 'react';\r\nimport { CartesianGrid, Legend, Line, LineChart, Tooltip, XAxis, YAxis } from 'recharts';\r\nimport { Level } from '../services/levels.model';\r\n\r\nexport type LevelsByYearMap = Map<number, Level[]>;\r\nexport type LevelsByDate = { date: string, [year: string]: any }\r\ntype ChartComponentProps = { data: LevelsByDate[], years: string[], width: number, height: number };\r\n\r\nconst colors = ['#5BC0EB', '#FDE74C', '#9BC53D', '#C3423F', '#404E4D', '#19535F', '#0B7A75', '#7B2D26', '#F1D302'];\r\n\r\nexport const ChartComponent = (props: ChartComponentProps) => {\r\n\tconst { data, years, width, height } = props;\r\n\treturn (\r\n\t\t<LineChart\r\n\t\t\twidth={width}\r\n\t\t\theight={height}\r\n\t\t\tdata={data}\r\n\t\t>\r\n\t\t\t<CartesianGrid strokeDasharray=\"1 1\" />\r\n\t\t\t<XAxis dataKey=\"date\"\r\n\t\t\t       ticks={Array(12).fill(1).map((_, idx) => '01.' + Number(idx + 1).toLocaleString(undefined, { minimumIntegerDigits: 2 }))} />\r\n\t\t\t{/*<YAxis domain={[(min: number) => Math.round(min * 10 - 2) / 10, (max: number) => Math.round(max * 10 + 2) / 10]} />*/}\r\n\t\t\t<YAxis domain={[98, 102]} tickCount={11} />\r\n\t\t\t<Tooltip />\r\n\t\t\t<Legend />\r\n\t\t\t{years.map((year, idx) => (\r\n\t\t\t\t<Line key={year}\r\n\t\t\t\t      type=\"monotone\"\r\n\t\t\t\t      dataKey={year}\r\n\t\t\t\t      dot={false}\r\n\t\t\t\t      isAnimationActive={false}\r\n\t\t\t\t      stroke={colors[idx]} />\r\n\t\t\t))\r\n\t\t\t}\r\n\t\t</LineChart>\r\n\t);\r\n};\r\n","import React from 'react';\r\nimport  AutoSizer  from 'react-virtualized-auto-sizer';\r\nimport { DataService, DataServiceContext } from '../services/data.service.context';\r\nimport { Level } from '../services/levels.model';\r\nimport { ChartComponent, LevelsByDate } from './chart.component';\r\n\r\ntype ChartProps = { years: string[] };\r\ntype ChartState = { levels: Level[] };\r\n\r\n\r\nexport class Chart extends React.Component<ChartProps, ChartState> {\r\n\tstatic contextType = DataServiceContext;\r\n\r\n\tstate: ChartState = { levels: [] };\r\n\r\n\tprivate service: DataService;\r\n\r\n\tconstructor(props: ChartProps) {\r\n\t\tsuper(props);\r\n\t\tthis.service = this.context;\r\n\t}\r\n\r\n\tcomponentDidMount() {\r\n\t\tlet service: DataService = this.context;\r\n\t\tservice.getLevels().then(levels => this.setState({ levels }));\r\n\t}\r\n\r\n\trender() {\r\n\t\tconst { levels } = this.state;\r\n\t\tconst { years } = this.props;\r\n\r\n\t\tconst chartData = levels.reduce<LevelsByDate[]>((res, level) => {\r\n\t\t\tconst dateStr = level.date.toFormat('dd.MM');\r\n\t\t\tconst yearStr = level.date.toFormat('yyyy');\r\n\t\t\tlet levelsByDate = res.find(byDate => byDate.date === dateStr);\r\n\t\t\tif (!levelsByDate) {\r\n\t\t\t\tlevelsByDate = { date: dateStr };\r\n\t\t\t\tres.push(levelsByDate);\r\n\t\t\t}\r\n\t\t\tlevelsByDate[yearStr] = level.level;\r\n\t\t\treturn res;\r\n\t\t}, []);\r\n\r\n\t\treturn (\r\n\t\t\t<AutoSizer>\r\n\t\t\t\t{({ width, height }) => <ChartComponent data={chartData}\r\n\t\t\t\t                                        years={years.map(String)}\r\n\t\t\t\t                                        height={height}\r\n\t\t\t\t                                        width={width} />}\r\n\t\t\t</AutoSizer>\r\n\t\t);\r\n\t}\r\n}\r\n","import React from 'react';\r\nimport { DataService, DataServiceContext } from '../../services/data.service.context';\r\nimport { ChangeHandler } from './change-handler';\r\n\r\ntype YearsSelectionProps = ChangeHandler<string[]> & { defaultYear: string };\r\ntype YearsSelectionState = { years: string[], selectedYears: string[] };\r\n\r\nexport class YearsSelection extends React.Component<YearsSelectionProps, YearsSelectionState> {\r\n\tstatic contextType = DataServiceContext;\r\n\r\n\tstate = {\r\n\t\tyears: [],\r\n\t\tselectedYears: [],\r\n\t};\r\n\r\n\tcomponentDidMount() {\r\n\t\tconst service: DataService = this.context;\r\n\t\tservice.getYears().then(years => this.setState({ years: years.map(String) }));\r\n\t\tlet selectedYears = [this.props.defaultYear];\r\n\t\tthis.setState({ selectedYears });\r\n\t\tthis.props.handleChange(selectedYears);\r\n\t}\r\n\r\n\trender() {\r\n\t\tconst { handleChange } = this.props;\r\n\t\tconst { selectedYears, years } = this.state;\r\n\r\n\t\tconst onChange = (evt: React.ChangeEvent<HTMLSelectElement>) => {\r\n\t\t\tconst selectedYears = [...evt.target.options].filter(option => option.selected).map(option => option.value);\r\n\t\t\tthis.setState({ selectedYears });\r\n\t\t\thandleChange(selectedYears);\r\n\t\t};\r\n\r\n\t\treturn (\r\n\t\t\t<div>\r\n\t\t\t\t<select multiple={true}\r\n\t\t\t\t        value={selectedYears}\r\n\t\t\t\t        size={years.length}\r\n\t\t\t\t        onChange={onChange}>\r\n\t\t\t\t\t{years.map(year => <option value={year}>{year}</option>)}\r\n\t\t\t\t</select>\r\n\t\t\t</div>\r\n\t\t);\r\n\t}\r\n}\r\n\r\n\r\n","import React, { useState } from 'react';\nimport { Chart } from './components/chart.container';\nimport { YearsSelection } from './components/controls/years-selection.container';\nimport { DataServiceContext, hgraphDataService } from './services/data.service.context';\nimport { getDefaultYear } from './services/date-time.utils';\n\nfunction App() {\n\tconst [years, setYears] = useState<string[]>([]);\n\tconst defaultYear = String(getDefaultYear());\n\n\treturn (\n\t\t<div className=\"App\" style={{ display: 'flex', flex: 1 }}>\n\t\t\t<DataServiceContext.Provider value={hgraphDataService}>\n\t\t\t\t<div style={{ display: 'flex', flex: 1 }}>\n\t\t\t\t\t<div style={{ width: '100%' }}>\n\t\t\t\t\t\t<Chart years={years} />\n\t\t\t\t\t</div>\n\t\t\t\t\t<div>\n\t\t\t\t\t\t<YearsSelection handleChange={setYears} defaultYear={defaultYear} />\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t\t</DataServiceContext.Provider>\n\t\t</div>\n\t);\n}\n\nexport default App;\n","import { DateTime } from 'luxon';\r\n\r\nexport const getDefaultYear = () => {\r\n\tconst today = DateTime.local();\r\n\tif (today.month <= 3) {\r\n\t\treturn today.minus({ years: 1 }).year;\r\n\t}\r\n\treturn today.year;\r\n};\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\nserviceWorker.register();\n"],"sourceRoot":""}