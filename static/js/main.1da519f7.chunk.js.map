{"version":3,"sources":["components/chart/chart.module.sass","services/statistic.service.ts","services/hgraph.data.service.ts","services/data.service.context.ts","components/chart/chart.utils.ts","utils/color.utils.ts","components/chart/chart.component.tsx","contexts/state/state.reducer.ts","contexts/state/state.context.tsx","components/chart/chart.container.tsx","components/years-selector/years-selector.component.tsx","components/years-selector/years-selector.container.ts","App.tsx","serviceWorker.ts","index.tsx","components/years-selector/years-selector.module.sass","App.module.sass"],"names":["module","exports","statisticService","smoothenLevels","levels","map","val","idx","isLast","length","prev","level","next","diffFromPrev","diffFromNext","isSameSignDiff","correctedLevel","Math","abs","cachedDataToSortedLevels","archive","startYear","endYear","Array","from","Object","entries","date","DateTime","fromFormat","filter","item","isValid","year","sort","o1","o2","diff","toObject","milliseconds","hgraphDataService","Memoize","HgraphDataService","archive2020","response","fetch","typedData","rybinskData","reduce","ryb","items","set","Map","dataArray","rawDataToSortedLevels","json","e","console","warn","Promise","resolve","getLevels","getLiveData","then","liveData","getCachedData","concat","this","cur","get","push","keys","DataServiceContext","React","createContext","labelCache","labelFormatter","v","res","dd","mm","split","Number","Date","toLocaleString","month","day","colors","getYearColor","ChartComponent","props","data","years","width","height","ticks","fill","_","undefined","minimumIntegerDigits","LineChart","className","styles","lineChart","CartesianGrid","strokeDasharray","XAxis","dataKey","axisLine","YAxis","domain","tickCount","Tooltip","Line","type","dot","isAnimationActive","connectNulls","stroke","strokeWidth","IncludeYearAction","constructor","value","ExcludeYearAction","reducer","state","action","selectedYears","y","initialState","StateContext","StateProvider","children","dispatch","useReducer","Provider","Chart","service","useContext","setLevels","useState","isLoading","setLoading","log","useEffect","finally","chartData","observation","dateStr","toFormat","yearStr","levelsByDate","find","byDate","YearsSelectorComponent","onInclude","onExclude","yearsList","handleChange","evt","checked","target","container","includes","labelProps","label","style","background","key","checkboxProps","input","onChange","YearsSelector","setYearsList","getYears","String","createElement","App","app","h1","interface","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","onUpdate","onSuccess","catch","error","ReactDOM","render","StrictMode","document","getElementById","URL","process","href","origin","addEventListener","headers","contentType","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.1da519f7.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"lineChart\":\"chart_lineChart__31CP1\"};","import { Level } from './levels.model';\r\n\r\nclass StatisticService {\r\n    /**\r\n     * Check if\r\n     */\r\n    readonly smoothenLevels = (levels: Level[]): Level[] => {\r\n        return levels.map((val, idx) => {\r\n            const isLast = idx === levels.length - 1;\r\n            const isFirst = idx === 0;\r\n            // first/last value is checked against single next/prev value (not fully accurate logic but let it be)\r\n            const prev = !isFirst ? levels[idx - 1].level : levels[idx + 1].level;\r\n            const next = !isLast ? levels[idx + 1].level : levels[idx - 1].level;\r\n            const diffFromPrev = val.level - prev;\r\n            const diffFromNext = val.level - next;\r\n            const isSameSignDiff = diffFromPrev * diffFromNext > 0;\r\n            const correctedLevel = Math.abs(diffFromPrev) > 0.05 && Math.abs(diffFromNext) > 0.05 && isSameSignDiff ? (prev + next) / 2 : val.level;\r\n            return { ...val, level: correctedLevel };\r\n        });\r\n    };\r\n}\r\n\r\nexport const statisticService = new StatisticService();\r\n","import { DateTime } from 'luxon';\r\nimport { Memoize } from 'typescript-memoize';\r\nimport { LevelsByYearMap } from '../components/chart/chart.component';\r\nimport archive from '../data/ryb2019.json';\r\nimport archive2020 from '../data/ryb2020.json';\r\nimport { DataService } from './data.service.context';\r\nimport { Level } from './levels.model';\r\nimport { statisticService } from './statistic.service';\r\n\r\ntype HgraphDataItem = {\r\n    date: string;\r\n    items: { [key: string]: number[] };\r\n}\r\n\r\ntype Archive = { [key: string]: number }\r\n\r\nexport class HgraphDataService implements DataService {\r\n    private static getCachedData(): Level[] {\r\n        const until2020 = cachedDataToSortedLevels(archive, 2014, 2019);\r\n        const in2020 = cachedDataToSortedLevels(archive2020, 2020, 2020);\r\n        return [...until2020, ...in2020];\r\n    };\r\n\r\n    private static async getLiveData(): Promise<Level[]> {\r\n        try {\r\n            const response = await fetch('http://hgraph.ru/api/year/2021');\r\n            const data = await response.json();\r\n            return rawDataToSortedLevels(data, 2021, 2021);\r\n        } catch (e) {\r\n            console.warn('Couldn\\'t get live data');\r\n            return Promise.resolve([]);\r\n        }\r\n    }\r\n\r\n    @Memoize()\r\n    getLevels(): Promise<Level[]> {\r\n        return HgraphDataService.getLiveData()\r\n            .then(liveData => HgraphDataService.getCachedData().concat(liveData))\r\n            .then(statisticService.smoothenLevels);\r\n    }\r\n\r\n    @Memoize()\r\n    async getYears(): Promise<number[]> {\r\n        const levels = await this.getLevels();\r\n        const yearsMap = levels.reduce<LevelsByYearMap>((map: LevelsByYearMap, cur: Level) => {\r\n            const year = cur.date.year;\r\n            const levels = map.get(year) || map.set(year, []).get(year);\r\n            levels!.push(cur);\r\n            return map;\r\n        }, new Map());\r\n\r\n        return [...yearsMap.keys()];\r\n    }\r\n}\r\n\r\nfunction rawDataToSortedLevels(typedData: HgraphDataItem[], startYear: number, endYear: number) {\r\n    const rybinskData = typedData.reduce((map, item) => {\r\n        const ryb = item.items['Рыбинское'];\r\n        if (ryb) {\r\n            map.set(item.date, ryb[0]);\r\n        }\r\n        return map;\r\n    }, new Map<string, number>());\r\n    const dataArray = Array.from(rybinskData.entries());\r\n\r\n    const convertedArray = dataArray.map(([date, level]) => ({\r\n        date: DateTime.fromFormat(date, 'dd.MM.yyyy'),\r\n        level,\r\n    })).filter(item => item.date.isValid).filter(item => item.date.year >= startYear && item.date.year <= endYear);\r\n\r\n    return convertedArray.sort((o1, o2) => {\r\n        return o1.date.diff(o2.date).toObject().milliseconds || 0;\r\n    });\r\n}\r\n\r\nfunction cachedDataToSortedLevels(archive: Archive, startYear: number, endYear: number) {\r\n    const dataArray = Array.from(Object.entries(archive));\r\n\r\n    const convertedArray = dataArray.map(([date, level]) => ({\r\n        date: DateTime.fromFormat(date, 'yyyy-MM-dd'),\r\n        level,\r\n    })).filter(item => item.date.isValid).filter(item => item.date.year >= startYear && item.date.year <= endYear);\r\n\r\n    return convertedArray.sort((o1, o2) => {\r\n        return o1.date.diff(o2.date).toObject().milliseconds || 0;\r\n    });\r\n\r\n}\r\n","import React from 'react';\r\nimport { HgraphDataService } from './hgraph.data.service';\r\n\r\nimport { Level } from './levels.model';\r\n\r\nexport interface DataService {\r\n    getLevels(): Promise<Level[]>;\r\n\r\n    getYears(): Promise<number[]>;\r\n}\r\n\r\nexport const hgraphDataService = new HgraphDataService();\r\nexport const DataServiceContext = React.createContext<DataService>(hgraphDataService);\r\n","const labelCache: Map<any, string> = new Map();\r\n\r\nexport const labelFormatter = (v: any) => {\r\n    let res = labelCache.get(v);\r\n    if (!res) {\r\n        try {\r\n            const [dd, mm] = v.split('.').map(Number);\r\n            const date = new Date(2020, mm - 1, dd);\r\n            res = date.toLocaleString('ru-RU', { month: 'long', day: 'numeric' });\r\n        } catch (e) {\r\n            res = '';\r\n        }\r\n        labelCache.set(v, res);\r\n    }\r\n    return res;\r\n};\r\n\r\nexport const getTimelineTicks =\r\n    () => Array(12).fill(1).map((_, idx) => '01.' + Number(idx + 1).toLocaleString(undefined, { minimumIntegerDigits: 2 }));\r\n","const colors: { [index: string]: string } = {\r\n    '2014': '#9BC53D',\r\n    '2015': '#C3423F',\r\n    '2016': '#0D2866',\r\n    '2017': '#8A2691',\r\n    '2018': '#19535F',\r\n    '2019': '#7B2D26',\r\n    '2020': '#3B7A0B',\r\n    '2021': '#F1D302',\r\n    '2022': '#9BC53D',\r\n    '2023': '#9BC53D',\r\n    '2024': '#9BC53D',\r\n};\r\nexport const getYearColor = (year: string) => colors[year] || '#000000';\r\n","import React from 'react';\r\nimport { CartesianGrid, Line, LineChart, Tooltip, XAxis, YAxis } from 'recharts';\r\nimport { Level } from 'services/levels.model';\r\nimport { labelFormatter, getTimelineTicks } from './chart.utils';\r\nimport styles from './chart.module.sass';\r\nimport { getYearColor } from '../../utils/color.utils';\r\n\r\nexport type LevelsByYearMap = Map<number, Level[]>;\r\nexport type LevelsByDate = { date: string, [year: string]: any }\r\nexport type ChartComponentProps = { data: LevelsByDate[], years: string[], width: number, height: number };\r\n\r\nexport const ChartComponent = (props: ChartComponentProps) => {\r\n    const { data, years, width, height } = props;\r\n    const ticks = getTimelineTicks();\r\n    return (\r\n        <LineChart\r\n            className={styles.lineChart}\r\n            width={width}\r\n            height={height}\r\n            data={data}\r\n        >\r\n            <CartesianGrid strokeDasharray=\"1 1\"/>\r\n            <XAxis dataKey=\"date\"\r\n                   axisLine={false}\r\n                   ticks={ticks}/>\r\n            <YAxis domain={[98, 102]} tickCount={21} axisLine={false}/>\r\n            <Tooltip labelFormatter={labelFormatter}/>\r\n            {years.map((year) => (\r\n                <Line key={year}\r\n                      type=\"monotone\"\r\n                      dataKey={year}\r\n                      dot={false}\r\n                      isAnimationActive={false}\r\n                      connectNulls={true}\r\n                      stroke={getYearColor(year)}\r\n                      strokeWidth={1.5}\r\n                />\r\n            ))}\r\n        </LineChart>\r\n    );\r\n};\r\n","export type State = {\r\n    selectedYears: string[];\r\n}\r\n\r\nexport class IncludeYearAction {\r\n    readonly type = 'IncludeYear';\r\n\r\n    constructor(readonly value: string) {\r\n    }\r\n}\r\n\r\nexport class ExcludeYearAction {\r\n    readonly type = 'ExcludeYear';\r\n\r\n    constructor(readonly value: string) {\r\n    }\r\n}\r\n\r\nexport type Action = IncludeYearAction | ExcludeYearAction;\r\n\r\nexport const reducer = (state: State, action: Action) => {\r\n    switch (action.type) {\r\n        case 'IncludeYear':\r\n            return {\r\n                ...state,\r\n                selectedYears: [...state.selectedYears, action.value],\r\n            };\r\n\r\n        case 'ExcludeYear':\r\n            return {\r\n                ...state,\r\n                selectedYears: state.selectedYears.filter(y => y !== action.value),\r\n            };\r\n\r\n        default:\r\n            return state;\r\n    }\r\n};\r\n\r\nexport const initialState: State = {\r\n    selectedYears: [],\r\n};\r\n","import { initialState, reducer, Action, State } from './state.reducer';\r\nimport React, { ReactNode } from 'react';\r\n\r\nexport const StateContext = React.createContext<[State, (action: Action) => void]>([\r\n    initialState,\r\n    () => {\r\n    },\r\n]);\r\n\r\nexport const StateProvider = ({ children }: { children: ReactNode }) => {\r\n    const [state, dispatch] = React.useReducer(reducer, initialState);\r\n    return (\r\n        <StateContext.Provider value={[state, dispatch]}>\r\n            {children}\r\n        </StateContext.Provider>\r\n    );\r\n};\r\n","import React, { useContext, useState, useEffect } from 'react';\r\nimport AutoSizer from 'react-virtualized-auto-sizer';\r\nimport { DataServiceContext, Level } from '../../services';\r\nimport { ChartComponent, LevelsByDate } from './chart.component';\r\nimport { StateContext } from '../../contexts/state/state.context';\r\n\r\nexport const Chart = () => {\r\n    const service = useContext(DataServiceContext);\r\n    const [levels, setLevels] = useState<Level[]>([]);\r\n    const [isLoading, setLoading] = useState(true);\r\n    const [{ selectedYears }] = useContext(StateContext);\r\n    console.log(selectedYears);\r\n\r\n    useEffect(() => {\r\n        service.getLevels()\r\n            .then(setLevels)\r\n            .finally(() => setLoading(false));\r\n    }, [service]);\r\n\r\n    const chartData = levels.reduce<LevelsByDate[]>((res, observation) => {\r\n        const dateStr = observation.date.toFormat('dd.MM');\r\n        const yearStr = observation.date.toFormat('yyyy');\r\n        let levelsByDate = res.find(byDate => byDate.date === dateStr);\r\n        if (!levelsByDate) {\r\n            levelsByDate = { date: dateStr };\r\n            res.push(levelsByDate);\r\n        }\r\n        levelsByDate[yearStr] = observation.level;\r\n        return res;\r\n    }, []);\r\n\r\n    return (\r\n        isLoading\r\n            ?\r\n            <div>Loading...</div>\r\n            :\r\n            <AutoSizer>\r\n                {({ width, height }) =>\r\n                    <ChartComponent data={chartData}\r\n                                    years={selectedYears}\r\n                                    height={height}\r\n                                    width={width}/>}\r\n            </AutoSizer>\r\n    );\r\n};\r\n","import React from 'react';\r\n\r\nimport styles from './years-selector.module.sass';\r\nimport { getYearColor } from '../../utils/color.utils';\r\n\r\ntype Props = {\r\n    onInclude: (value: string) => void;\r\n    onExclude: (value: string) => void;\r\n    yearsList: string[];\r\n    selectedYears: string[];\r\n}\r\n\r\nexport const YearsSelectorComponent = ({ onInclude, onExclude, yearsList, selectedYears }: Props) => {\r\n    const handleChange = (evt: React.ChangeEvent<HTMLInputElement>) => {\r\n        const { checked, value } = evt.target;\r\n        checked ? onInclude(value) : onExclude(value);\r\n    };\r\n\r\n    return (\r\n        <div className={styles.container}>\r\n            {yearsList.map(y => {\r\n                const checked = selectedYears.includes(y);\r\n                const labelProps = {\r\n                    className: `${styles.label} ${checked && styles.checked}`,\r\n                    style: { background: `${checked ? getYearColor(y) : 'none'}` },\r\n                    key: y,\r\n                };\r\n                const checkboxProps = {\r\n                    type: 'checkbox',\r\n                    className: styles.input,\r\n                    value: y,\r\n                    checked,\r\n                    onChange: handleChange,\r\n                };\r\n                return <label {...labelProps}>\r\n                    <input {...checkboxProps}/>{' '}{y}\r\n                </label>;\r\n            })}\r\n        </div>\r\n    );\r\n};\r\n\r\n\r\n","import React, { useContext, useEffect, useState } from 'react';\r\nimport { DataServiceContext } from '../../services';\r\nimport { YearsSelectorComponent } from './years-selector.component';\r\nimport { StateContext } from '../../contexts/state/state.context';\r\nimport { ExcludeYearAction, IncludeYearAction } from '../../contexts/state/state.reducer';\r\n\r\nexport const YearsSelector = () => {\r\n    const service = useContext(DataServiceContext);\r\n    const [yearsList, setYearsList] = useState<string[]>([]);\r\n    const [{ selectedYears }, dispatch] = useContext(StateContext);\r\n    useEffect(() => {\r\n        service.getYears().then(years => setYearsList(years.map(String)));\r\n    }, [service]);\r\n\r\n    const onInclude = (year: string) => dispatch(new IncludeYearAction(year));\r\n    const onExclude = (year: string) => dispatch(new ExcludeYearAction(year));\r\n\r\n    return React.createElement(YearsSelectorComponent, { onInclude, onExclude, yearsList, selectedYears });\r\n};\r\n","import React from 'react';\r\n\r\nimport styles from './App.module.sass';\r\nimport { Chart, YearsSelector } from './components';\r\nimport { DataServiceContext, hgraphDataService } from './services';\r\nimport { StateProvider } from './contexts/state/state.context';\r\n\r\nfunction App() {\r\n    return (\r\n        <div className={styles.app}>\r\n            <StateProvider>\r\n                <h1 className={styles.h1}>Уровень воды в Рыбинском вдхр.</h1>\r\n                <DataServiceContext.Provider value={hgraphDataService}>\r\n                    <div className={styles.interface}>\r\n                        <div style={{ width: '100%' }}>\r\n                            <Chart/>\r\n                        </div>\r\n                        <div>\r\n                            <YearsSelector/>\r\n                        </div>\r\n                    </div>\r\n                </DataServiceContext.Provider>\r\n            </StateProvider>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n    window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n        /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/,\r\n    ),\r\n);\r\n\r\ntype Config = {\r\n    onSuccess?: (registration: ServiceWorkerRegistration) => void;\r\n    onUpdate?: (registration: ServiceWorkerRegistration) => void;\r\n};\r\n\r\nexport function register(config?: Config) {\r\n    if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n        // The URL constructor is available in all browsers that support SW.\r\n        const publicUrl = new URL(\r\n            process.env.PUBLIC_URL,\r\n            window.location.href,\r\n        );\r\n        if (publicUrl.origin !== window.location.origin) {\r\n            // Our service worker won't work if PUBLIC_URL is on a different origin\r\n            // from what our page is served on. This might happen if a CDN is used to\r\n            // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n            return;\r\n        }\r\n\r\n        window.addEventListener('load', () => {\r\n            const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n            if (isLocalhost) {\r\n                // This is running on localhost. Let's check if a service worker still exists or not.\r\n                checkValidServiceWorker(swUrl, config);\r\n\r\n                // Add some additional logging to localhost, pointing developers to the\r\n                // service worker/PWA documentation.\r\n                navigator.serviceWorker.ready.then(() => {\r\n                    console.log(\r\n                        'This web app is being served cache-first by a service ' +\r\n                        'worker. To learn more, visit https://bit.ly/CRA-PWA',\r\n                    );\r\n                });\r\n            } else {\r\n                // Is not localhost. Just register service worker\r\n                registerValidSW(swUrl, config);\r\n            }\r\n        });\r\n    }\r\n}\r\n\r\nfunction registerValidSW(swUrl: string, config?: Config) {\r\n    navigator.serviceWorker\r\n        .register(swUrl)\r\n        .then(registration => {\r\n            registration.onupdatefound = () => {\r\n                const installingWorker = registration.installing;\r\n                if (installingWorker == null) {\r\n                    return;\r\n                }\r\n                installingWorker.onstatechange = () => {\r\n                    if (installingWorker.state === 'installed') {\r\n                        if (navigator.serviceWorker.controller) {\r\n                            // At this point, the updated precached content has been fetched,\r\n                            // but the previous service worker will still serve the older\r\n                            // content until all client tabs are closed.\r\n                            console.log(\r\n                                'New content is available and will be used when all ' +\r\n                                'tabs for this page are closed. See https://bit.ly/CRA-PWA.',\r\n                            );\r\n\r\n                            // Execute callback\r\n                            if (config && config.onUpdate) {\r\n                                config.onUpdate(registration);\r\n                            }\r\n                        } else {\r\n                            // At this point, everything has been precached.\r\n                            // It's the perfect time to display a\r\n                            // \"Content is cached for offline use.\" message.\r\n                            console.log('Content is cached for offline use.');\r\n\r\n                            // Execute callback\r\n                            if (config && config.onSuccess) {\r\n                                config.onSuccess(registration);\r\n                            }\r\n                        }\r\n                    }\r\n                };\r\n            };\r\n        })\r\n        .catch(error => {\r\n            console.error('Error during service worker registration:', error);\r\n        });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\r\n    // Check if the service worker can be found. If it can't reload the page.\r\n    fetch(swUrl, {\r\n        headers: { 'Service-Worker': 'script' },\r\n    })\r\n        .then(response => {\r\n            // Ensure service worker exists, and that we really are getting a JS file.\r\n            const contentType = response.headers.get('content-type');\r\n            if (\r\n                response.status === 404 ||\r\n                (contentType != null && contentType.indexOf('javascript') === -1)\r\n            ) {\r\n                // No service worker found. Probably a different app. Reload the page.\r\n                navigator.serviceWorker.ready.then(registration => {\r\n                    registration.unregister().then(() => {\r\n                        window.location.reload();\r\n                    });\r\n                });\r\n            } else {\r\n                // Service worker found. Proceed as normal.\r\n                registerValidSW(swUrl, config);\r\n            }\r\n        })\r\n        .catch(() => {\r\n            console.log(\r\n                'No internet connection found. App is running in offline mode.',\r\n            );\r\n        });\r\n}\r\n\r\nexport function unregister() {\r\n    if ('serviceWorker' in navigator) {\r\n        navigator.serviceWorker.ready\r\n            .then(registration => {\r\n                registration.unregister();\r\n            })\r\n            .catch(error => {\r\n                console.error(error.message);\r\n            });\r\n    }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.sass';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n    <React.StrictMode>\r\n        <App/>\r\n    </React.StrictMode>,\r\n    document.getElementById('root'),\r\n);\r\n\r\nserviceWorker.register();\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"years-selector_container__1GW1M\",\"label\":\"years-selector_label__3rWxP\",\"checked\":\"years-selector_checked__31KHa\",\"input\":\"years-selector_input__kwanH\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"app\":\"App_app__4HWOX\",\"interface\":\"App_interface__2-f8B\",\"h1\":\"App_h1__2o6DZ\"};"],"sourceRoot":""}